package views.logon;

import util.ValidationManager;
import util.DatabaseManager;
import com.mysql.cj.jdbc.Blob;
import entity.Logon;
import entity.Person;
import entity.Position;
import entity.SecurityQuestion;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.io.File;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import util.ImageManager;
import util.StateManager;
import util.MessageBox;

/*
Author: Braeden Palomino
Date: 10/08/24
Description: A Panel that contains a form to create an account. 
 */
public class PanelCreateAccount extends javax.swing.JPanel {

    private StateManager panelState;

    private Blob fieldImage = null;

    /**
     * Creates new form CreateAccountView
     */
    public PanelCreateAccount(StateManager panelState) {
        initComponents();
        populateBoxes();

        this.panelState = panelState;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        title = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        panelForm = new javax.swing.JPanel();
        sectionOnePanel = new javax.swing.JPanel();
        labelQuestion = new javax.swing.JLabel();
        comboPosition = new javax.swing.JComboBox<>();
        labelCreateLogon = new javax.swing.JLabel();
        fieldUsername = new javax.swing.JTextField();
        fieldPassword = new javax.swing.JTextField();
        panelReq = new javax.swing.JPanel();
        labelUserReq = new javax.swing.JLabel();
        labelReqOne = new javax.swing.JLabel();
        labelReqTwo = new javax.swing.JLabel();
        labelReqThree = new javax.swing.JLabel();
        labelPassReq = new javax.swing.JLabel();
        labelReqOneA = new javax.swing.JLabel();
        labelReqTwoA = new javax.swing.JLabel();
        labelReqThreeA = new javax.swing.JLabel();
        labelReqFourA = new javax.swing.JLabel();
        labelReqFiveA = new javax.swing.JLabel();
        progressLogonID = new javax.swing.JProgressBar();
        sectionTwoPanel = new javax.swing.JPanel();
        labelSecurityQuestions = new javax.swing.JLabel();
        comboQuestionOne = new javax.swing.JComboBox<>();
        fieldAnswerOne = new javax.swing.JTextField();
        comboQuestionTwo = new javax.swing.JComboBox<>();
        fieldAnswerTwo = new javax.swing.JTextField();
        comboQuestionThree = new javax.swing.JComboBox<>();
        fieldAnswerThree = new javax.swing.JTextField();
        sectionThreePanel = new javax.swing.JPanel();
        labelStepTwo = new javax.swing.JLabel();
        fieldTitle = new javax.swing.JTextField();
        fieldFirstName = new javax.swing.JTextField();
        fieldMiddleName = new javax.swing.JTextField();
        fieldLastName = new javax.swing.JTextField();
        comboSuffix = new javax.swing.JComboBox<>();
        fieldPrimaryPhone = new javax.swing.JTextField();
        fieldSecondaryPhone = new javax.swing.JTextField();
        fieldEmail = new javax.swing.JTextField();
        sectionFourPanel = new javax.swing.JPanel();
        labelStepFour = new javax.swing.JLabel();
        fieldAdrOne = new javax.swing.JTextField();
        fieldAdrTwo = new javax.swing.JTextField();
        fieldAdrThree = new javax.swing.JTextField();
        fieldCity = new javax.swing.JTextField();
        comboState = new javax.swing.JComboBox<>();
        fieldZipcode = new javax.swing.JTextField();
        sectionFivePanel = new javax.swing.JPanel();
        labelStepThree = new javax.swing.JLabel();
        panelImage = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnUploadImage = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        btnClearFields = new javax.swing.JButton();
        progressOverall = new javax.swing.JProgressBar();

        setName("Logon"); // NOI18N
        setPreferredSize(new java.awt.Dimension(674, 448));
        setLayout(new java.awt.GridBagLayout());

        title.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        title.setText("Account Creation Form");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(title, gridBagConstraints);

        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        panelForm.setMinimumSize(new java.awt.Dimension(100, 106));
        panelForm.setLayout(new java.awt.GridBagLayout());

        sectionOnePanel.setLayout(new java.awt.GridBagLayout());

        labelQuestion.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        labelQuestion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelQuestion.setText("Who is this Account for?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionOnePanel.add(labelQuestion, gridBagConstraints);

        comboPosition.setBorder(javax.swing.BorderFactory.createTitledBorder("Position"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionOnePanel.add(comboPosition, gridBagConstraints);

        labelCreateLogon.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        labelCreateLogon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelCreateLogon.setText("Create a Logon ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionOnePanel.add(labelCreateLogon, gridBagConstraints);

        fieldUsername.setBorder(javax.swing.BorderFactory.createTitledBorder("Username *"));
        fieldUsername.setName("usernameField"); // NOI18N
        fieldUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionOnePanel.add(fieldUsername, gridBagConstraints);

        fieldPassword.setBorder(javax.swing.BorderFactory.createTitledBorder("Password *"));
        fieldPassword.setName("passwordField"); // NOI18N
        fieldPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionOnePanel.add(fieldPassword, gridBagConstraints);

        panelReq.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelReq.setLayout(new java.awt.GridBagLayout());

        labelUserReq.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelUserReq.setText("Username Requirements:");
        labelUserReq.setName("titleOne"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 25);
        panelReq.add(labelUserReq, gridBagConstraints);

        labelReqOne.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        labelReqOne.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelReqOne.setForeground(new java.awt.Color(0, 0, 0));
        labelReqOne.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelReqOne.setText("Doesn't start with number");
        labelReqOne.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 25);
        panelReq.add(labelReqOne, gridBagConstraints);

        labelReqTwo.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        labelReqTwo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelReqTwo.setForeground(new java.awt.Color(0, 0, 0));
        labelReqTwo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelReqTwo.setText("No special/empty characters");
        labelReqTwo.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 25);
        panelReq.add(labelReqTwo, gridBagConstraints);

        labelReqThree.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        labelReqThree.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelReqThree.setForeground(new java.awt.Color(0, 0, 0));
        labelReqThree.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelReqThree.setText("Length between 8-20");
        labelReqThree.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 25);
        panelReq.add(labelReqThree, gridBagConstraints);

        labelPassReq.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPassReq.setText("Password Requirements:");
        labelPassReq.setName("titleTwo"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 25);
        panelReq.add(labelPassReq, gridBagConstraints);

        labelReqOneA.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        labelReqOneA.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelReqOneA.setForeground(new java.awt.Color(0, 0, 0));
        labelReqOneA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelReqOneA.setText("Length between 8-20 (Required)");
        labelReqOneA.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 25);
        panelReq.add(labelReqOneA, gridBagConstraints);

        labelReqTwoA.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        labelReqTwoA.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelReqTwoA.setForeground(new java.awt.Color(0, 0, 0));
        labelReqTwoA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelReqTwoA.setText("Upper case characters");
        labelReqTwoA.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 25);
        panelReq.add(labelReqTwoA, gridBagConstraints);

        labelReqThreeA.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        labelReqThreeA.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelReqThreeA.setForeground(new java.awt.Color(0, 0, 0));
        labelReqThreeA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelReqThreeA.setText("Lower case characters");
        labelReqThreeA.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 25);
        panelReq.add(labelReqThreeA, gridBagConstraints);

        labelReqFourA.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        labelReqFourA.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelReqFourA.setForeground(new java.awt.Color(0, 0, 0));
        labelReqFourA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelReqFourA.setText("Numbers (0 through 9)");
        labelReqFourA.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 25);
        panelReq.add(labelReqFourA, gridBagConstraints);

        labelReqFiveA.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        labelReqFiveA.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelReqFiveA.setForeground(new java.awt.Color(0, 0, 0));
        labelReqFiveA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelReqFiveA.setText("Special characters ()!@#$%^&*");
        labelReqFiveA.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 25);
        panelReq.add(labelReqFiveA, gridBagConstraints);

        progressLogonID.setForeground(new java.awt.Color(0, 153, 153));
        progressLogonID.setMaximum(7);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.ipady = 21;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 30, 10, 30);
        panelReq.add(progressLogonID, gridBagConstraints);
        progressLogonID.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (progressLogonID.getValue() == progressLogonID.getMaximum()) {
                    progressOverall.setValue(progressOverall.getValue() + 2);
                } else {
                    progressOverall.setValue(progressOverall.getValue() - 2);
                }
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionOnePanel.add(panelReq, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        panelForm.add(sectionOnePanel, gridBagConstraints);

        sectionTwoPanel.setLayout(new java.awt.GridBagLayout());

        labelSecurityQuestions.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        labelSecurityQuestions.setText("Security Questions");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionTwoPanel.add(labelSecurityQuestions, gridBagConstraints);

        comboQuestionOne.setBorder(javax.swing.BorderFactory.createTitledBorder("Question One"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionTwoPanel.add(comboQuestionOne, gridBagConstraints);

        fieldAnswerOne.setBorder(javax.swing.BorderFactory.createTitledBorder("Answer One"));
        fieldAnswerOne.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionTwoPanel.add(fieldAnswerOne, gridBagConstraints);

        comboQuestionTwo.setBorder(javax.swing.BorderFactory.createTitledBorder("Question Two"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionTwoPanel.add(comboQuestionTwo, gridBagConstraints);

        fieldAnswerTwo.setBorder(javax.swing.BorderFactory.createTitledBorder("Answer Two"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionTwoPanel.add(fieldAnswerTwo, gridBagConstraints);
        fieldAnswerTwo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        comboQuestionThree.setBorder(javax.swing.BorderFactory.createTitledBorder("Question Three"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionTwoPanel.add(comboQuestionThree, gridBagConstraints);

        fieldAnswerThree.setBorder(javax.swing.BorderFactory.createTitledBorder("Answer Three"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionTwoPanel.add(fieldAnswerThree, gridBagConstraints);
        fieldAnswerThree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        panelForm.add(sectionTwoPanel, gridBagConstraints);

        sectionThreePanel.setLayout(new java.awt.GridBagLayout());

        labelStepTwo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        labelStepTwo.setText("Contact Information");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionThreePanel.add(labelStepTwo, gridBagConstraints);

        fieldTitle.setToolTipText("- Must start with A-Z\n- Can contain a-z\n- Must end with '.'\nExamples: \"Mr.\", \"Miss.\", \"Sir.\"");
        fieldTitle.setBorder(javax.swing.BorderFactory.createTitledBorder("Title (Optional)"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionThreePanel.add(fieldTitle, gridBagConstraints);
        fieldTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        fieldFirstName.setBorder(javax.swing.BorderFactory.createTitledBorder("First Name *"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionThreePanel.add(fieldFirstName, gridBagConstraints);
        fieldFirstName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        fieldMiddleName.setBorder(javax.swing.BorderFactory.createTitledBorder("Middle Name (Optional)"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionThreePanel.add(fieldMiddleName, gridBagConstraints);
        fieldMiddleName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        fieldLastName.setBorder(javax.swing.BorderFactory.createTitledBorder("Last Name *"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionThreePanel.add(fieldLastName, gridBagConstraints);
        fieldLastName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        comboSuffix.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Jr.", "Sr.", "I", "II", "III", "IV", "V" }));
        comboSuffix.setBorder(javax.swing.BorderFactory.createTitledBorder("Suffix (Optional)"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionThreePanel.add(comboSuffix, gridBagConstraints);

        fieldPrimaryPhone.setToolTipText("Example: \"512-129-2930\"");
        fieldPrimaryPhone.setBorder(javax.swing.BorderFactory.createTitledBorder("Primary Phone (Optional)"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionThreePanel.add(fieldPrimaryPhone, gridBagConstraints);
        fieldPrimaryPhone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        fieldSecondaryPhone.setToolTipText("Example: \"512-129-2930\"");
        fieldSecondaryPhone.setBorder(javax.swing.BorderFactory.createTitledBorder("Secondary Phone (Optional)"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionThreePanel.add(fieldSecondaryPhone, gridBagConstraints);
        fieldSecondaryPhone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        fieldEmail.setToolTipText("Example: mail@mail.com");
        fieldEmail.setBorder(javax.swing.BorderFactory.createTitledBorder("Email (Optional)"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionThreePanel.add(fieldEmail, gridBagConstraints);
        fieldEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        panelForm.add(sectionThreePanel, gridBagConstraints);

        sectionFourPanel.setLayout(new java.awt.GridBagLayout());

        labelStepFour.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        labelStepFour.setText("Shipping Information");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionFourPanel.add(labelStepFour, gridBagConstraints);

        fieldAdrOne.setToolTipText("(Your Name), (Company Name), (Dep. Name, Company Name)");
        fieldAdrOne.setBorder(javax.swing.BorderFactory.createTitledBorder("Address Title *"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionFourPanel.add(fieldAdrOne, gridBagConstraints);
        fieldAdrOne.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        fieldAdrTwo.setToolTipText("Box 12345");
        fieldAdrTwo.setBorder(javax.swing.BorderFactory.createTitledBorder("PO Box (Optional)"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionFourPanel.add(fieldAdrTwo, gridBagConstraints);
        fieldAdrTwo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
        });

        fieldAdrThree.setToolTipText("123 Big Building Drive");
        fieldAdrThree.setBorder(javax.swing.BorderFactory.createTitledBorder("Delivery Adr. (Optional)"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionFourPanel.add(fieldAdrThree, gridBagConstraints);
        fieldAdrThree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
        });

        fieldCity.setBorder(javax.swing.BorderFactory.createTitledBorder("City *"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionFourPanel.add(fieldCity, gridBagConstraints);
        fieldCity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        comboState.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY", "AE", "AP", "AA" }));
        comboState.setToolTipText("");
        comboState.setBorder(javax.swing.BorderFactory.createTitledBorder("State *"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionFourPanel.add(comboState, gridBagConstraints);

        fieldZipcode.setBorder(javax.swing.BorderFactory.createTitledBorder("Zip Code *"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionFourPanel.add(fieldZipcode, gridBagConstraints);
        fieldZipcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        panelForm.add(sectionFourPanel, gridBagConstraints);

        sectionFivePanel.setLayout(new java.awt.GridBagLayout());

        labelStepThree.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        labelStepThree.setText("Profile Image");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionFivePanel.add(labelStepThree, gridBagConstraints);

        panelImage.setBorder(javax.swing.BorderFactory.createTitledBorder("Image"));
        panelImage.setMaximumSize(new java.awt.Dimension(250, 250));
        panelImage.setMinimumSize(new java.awt.Dimension(100, 100));
        panelImage.setLayout(new java.awt.BorderLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("image");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelImage.add(jLabel1, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.ipady = 200;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionFivePanel.add(panelImage, gridBagConstraints);

        btnUploadImage.setBackground(new java.awt.Color(0, 153, 153));
        btnUploadImage.setText("Upload Image");
        btnUploadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadImageBtnUploadImage(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 45;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionFivePanel.add(btnUploadImage, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        panelForm.add(sectionFivePanel, gridBagConstraints);

        scrollPane.setViewportView(panelForm);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(scrollPane, gridBagConstraints);
        scrollPane.getVerticalScrollBar().setUnitIncrement(16);

        btnCreate.setBackground(new java.awt.Color(0, 153, 153));
        btnCreate.setText("Create Account");
        btnCreate.setEnabled(false);
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateAccount(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 45;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(btnCreate, gridBagConstraints);

        btnClearFields.setBackground(new java.awt.Color(0, 153, 153));
        btnClearFields.setText("Clear Fields");
        btnClearFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFieldsBtnClearClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 45;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(btnClearFields, gridBagConstraints);

        progressOverall.setForeground(new java.awt.Color(0, 153, 153));
        progressOverall.setMaximum(16);
        progressOverall.setBorder(javax.swing.BorderFactory.createTitledBorder("Form Completion"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(progressOverall, gridBagConstraints);
        progressOverall.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (progressOverall.getValue() == progressOverall.getMaximum()) {
                    btnCreate.setEnabled(true);
                } else {
                    btnCreate.setEnabled(false);
                }
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadImageBtnUploadImage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadImageBtnUploadImage
        // TODO add your handling code here:
        uploadImage();
    }//GEN-LAST:event_btnUploadImageBtnUploadImage

    private void btnCreateAccount(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateAccount
        // TODO add your handling code here:   
        validateForm();

        if (btnCreate.isEnabled()) {

            saveFormData();

        }
    }//GEN-LAST:event_btnCreateAccount

    private void btnClearFieldsBtnClearClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFieldsBtnClearClicked
        // TODO add your handling code here:
        resetForm();
    }//GEN-LAST:event_btnClearFieldsBtnClearClicked

    // Methods (Getters)  
    public ArrayList<JLabel> getAllUsernameLabels() {
        ArrayList<JLabel> list = new ArrayList<>();
        list.add(labelReqOne);
        list.add(labelReqTwo);
        list.add(labelReqThree);

        return list;
    }

    public ArrayList<JLabel> getAllPasswordLabels() {
        ArrayList<JLabel> list = new ArrayList<>();
        list.add(labelReqOneA);
        list.add(labelReqTwoA);
        list.add(labelReqThreeA);
        list.add(labelReqFourA);
        list.add(labelReqFiveA);

        return list;
    }

    public ArrayList<JTextField> getAllSecurityQuestionFields() {
        ArrayList<JTextField> allFields = new ArrayList<>();

        allFields.add(fieldAnswerOne);
        allFields.add(fieldAnswerTwo);
        allFields.add(fieldAnswerThree);

        return allFields;
    }

    public ArrayList<JTextField> getAllContactFields() {
        ArrayList<JTextField> allFields = new ArrayList<>();

        allFields.add(fieldTitle);
        allFields.add(fieldFirstName);
        allFields.add(fieldLastName);
        allFields.add(fieldEmail);
        allFields.add(fieldPrimaryPhone);
        allFields.add(fieldSecondaryPhone);

        return allFields;
    }

    public ArrayList<JTextField> getAllShippingFields() {
        ArrayList<JTextField> allFields = new ArrayList<>();

        allFields.add(fieldAdrOne);
        allFields.add(fieldAdrTwo);
        allFields.add(fieldAdrThree);
        allFields.add(fieldCity);
        allFields.add(fieldZipcode);

        return allFields;
    }

    // Methods (Void)
    private void populateBoxes() {

        ArrayList<SecurityQuestion> qList = DatabaseManager.getAllSecurityQuestions();
        ArrayList<Position> pList = DatabaseManager.getAllPositions();

        Collections.sort(qList);

        SecurityQuestion[] tempList = {null, null, null};

        // Set Security comboboxes using a for loop, this is so the defaultboxmodel 
        // can be changed to use the SQ class instead of String
        int setID = 1;
        int subIndex = 0;
        for (int i = 0; i < qList.size(); i++) {
            int curSetID = qList.get(i).getSetID();

            if (curSetID == setID) {
                tempList[subIndex] = qList.get(i);
                subIndex++;
            } else {
                switch (setID) {
                    case 1:
                        comboQuestionOne.setModel(new DefaultComboBoxModel(tempList));
                        break;
                    case 2:
                        comboQuestionTwo.setModel(new DefaultComboBoxModel(tempList));
                        break;
                }
                setID++;
                i--;
                subIndex = 0;
            }

            if (i == qList.size() - 1) {
                comboQuestionThree.setModel(new DefaultComboBoxModel(tempList));
            }
        }

        // Set the Position combobox
        // doesn't need the box model, string value works ok when getting value
        for (Position p : pList) {
            comboPosition.addItem(p.getPositionTitle());
        }

    }

    private void validateForm() {
        // Gather all validation results
        ArrayList<Boolean> validationResultsUsername = ValidationManager.validateUsername(fieldUsername.getText());
        ArrayList<Boolean> validationResultsPassword = ValidationManager.validatePassword(fieldPassword.getText());
        ArrayList<Boolean> validationResultsSecurity = ValidationManager.validateSecurityQuestions(fieldAnswerOne.getText(), fieldAnswerTwo.getText(), fieldAnswerThree.getText());
        ArrayList<Boolean> validationResultsContact = ValidationManager.validateContactInformation(fieldTitle.getText(), fieldFirstName.getText(), fieldLastName.getText(), fieldEmail.getText(), fieldPrimaryPhone.getText(), fieldSecondaryPhone.getText());
        ArrayList<Boolean> validationResultsShipping = ValidationManager.validateShippingInformation(fieldAdrOne.getText(), fieldAdrTwo.getText(), fieldAdrThree.getText(), fieldCity.getText(), fieldZipcode.getText());

        // Gather all GUI components to update
        ArrayList<JLabel> labelsForUsername = getAllUsernameLabels();
        ArrayList<JLabel> labelsForPassword = getAllPasswordLabels();
        ArrayList<JTextField> fieldsForSecurity = getAllSecurityQuestionFields();
        ArrayList<JTextField> fieldsForContact = getAllContactFields();
        ArrayList<JTextField> fieldsForShipping = getAllShippingFields();

        // Initialize progress / set progress
        int overallProgress = 0;
        int logonIDProgress = 0;
        int optionalsValid = 0;

        progressLogonID.setValue(0);
        progressOverall.setValue(0);

        // ----- UPDATING GUI -----
        // Update the JLabels for the username requirements
        for (int i = 0; i < labelsForUsername.size(); i++) {
            if (validationResultsUsername.get(i)) {
                labelsForUsername.get(i).setBackground(UIManager.getDefaults().getColor("Actions.Green"));
                logonIDProgress++;
            } else {
                labelsForUsername.get(i).setBackground(UIManager.getDefaults().getColor("Actions.Red"));
            }
        }

        // Update the JLabels for the password requirements
        for (int i = 0; i < labelsForPassword.size(); i++) {
            if (validationResultsPassword.get(i)) {
                // check if field is 1 of the 4 choices
                if (i > 0 && optionalsValid < 3) {
                    optionalsValid++;
                    logonIDProgress++;
                } else if (i == 0) {
                    logonIDProgress++;
                }
                labelsForPassword.get(i).setBackground(UIManager.getDefaults().getColor("Actions.Green"));
            } else {
                labelsForPassword.get(i).setBackground(UIManager.getDefaults().getColor("Actions.Red"));
            }
        }

        // Update the JTextFields for the Security Questions (background colors)
        for (int i = 0; i < fieldsForSecurity.size(); i++) {
            if (validationResultsSecurity.get(i)) {
                fieldsForSecurity.get(i).setBackground(new Color(70, 73, 75));
                overallProgress++;
            } else {
                fieldsForSecurity.get(i).setBackground(UIManager.getDefaults().getColor("Actions.Red"));
            }
        }

        // Update the JTextFields for the Contact Information (background colors)
        for (int i = 0; i < fieldsForContact.size(); i++) {
            if (validationResultsContact.get(i)) {
                fieldsForContact.get(i).setBackground(new Color(70, 73, 75));
                overallProgress++;

            } else {
                fieldsForContact.get(i).setBackground(UIManager.getDefaults().getColor("Actions.Red"));
            }
        }

        // Update the JTextFields for the Shipping Information (background colors)
        for (int i = 0; i < fieldsForShipping.size(); i++) {
            if (validationResultsShipping.get(i)) {
                fieldsForShipping.get(i).setBackground(new Color(70, 73, 75));
                overallProgress++;

            } else {
                fieldsForShipping.get(i).setBackground(UIManager.getDefaults().getColor("Actions.Red"));
            }
        }

        // Update form progress 
        if (logonIDProgress == progressLogonID.getMaximum()) {
            overallProgress += 2;
        }

        progressLogonID.setValue(logonIDProgress);
        progressOverall.setValue(overallProgress);
    }

    private void resetForm() {
        for (Component sectionPanel : panelForm.getComponents()) {
            for (Component c : ((JPanel) sectionPanel).getComponents()) {
                try {
                    ((JTextField) c).setText(null);
                    ((JTextField) c).setBackground(new Color(70, 73, 75));
                } catch (Exception ex) {
                }
                try {
                    ((JFormattedTextField) c).setText(null);
                    ((JFormattedTextField) c).setBackground(new Color(70, 73, 75));
                } catch (Exception ex) {
                }
                try {
                    ((JComboBox) c).setSelectedIndex(0);
                } catch (Exception ex) {

                }
            }

        }
        for (Component l : panelReq.getComponents()) {
            try {
                if (l.getName() != "titleOne" || l.getName() != "titleTwo") {
                    ((JLabel) l).setBackground(UIManager.getDefaults().getColor("Actions.Red"));
                }
            } catch (Exception ex) {

            }
        }

        panelImage.removeAll();
        fieldImage = null;

        progressLogonID.setValue(0);
        progressOverall.setValue(0);

        repaint();
        revalidate();
    }

    private void uploadImage() {
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG & PNG Images", "jpg", "png", "jpeg");

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                // Gather byte data from img file and put in imageIcon/Image
                File imgFile = fileChooser.getSelectedFile();
                byte[] b = Files.readAllBytes(imgFile.toPath());

                ImageIcon icon = ImageManager.getScaledImageIcon(b, ImageManager.SIZE_PREVIEW);

                // Prepare image panel and add image
                panelImage.removeAll();
                panelImage.add(new JLabel(icon), BorderLayout.CENTER);

                // Save image to image field as a blob                              
                fieldImage = (Blob) DatabaseManager.getConnection().createBlob();
                fieldImage.setBytes(1, b);

                // new MessageBox(panelState.getMainFrame(), true, "This image is too large with a size of " + imgFile.length() + " and exceeds the limit of 65535 bytes", MessageBox.ERROR);
                revalidate();
                repaint();
            } catch (Exception ex) {
                System.out.println(ex);
            }

        }
    }

    private void saveFormData() {
        // Before doing anything, check if the username already exists
        if (!ValidationManager.usernameExists(fieldUsername.getText())) {
            // Step 1: Create Entity Data Objects
            Person person = new Person();
            Logon logon = new Logon();

            // Step 2: Set all the data
            // Person
            person.setPersonID(0);
            if (fieldTitle.getText().length() == 0) {
                person.setTitle(null);
            } else {
                person.setTitle(fieldTitle.getText());
            }
            person.setNameFirst(fieldFirstName.getText());
            person.setNameLast(fieldLastName.getText());
            if (fieldMiddleName.getText().length() > 0) {
                person.setNameMiddle(fieldMiddleName.getText());
            } else {
                person.setNameMiddle(null);
            }
            if (comboSuffix.getSelectedItem() != "None") {
                person.setSuffix(comboSuffix.getSelectedItem().toString());
            } else {
                person.setSuffix(null);
            }
            if (fieldAdrOne.getText().length() > 0) {
                person.setAddressOne(fieldAdrOne.getText().toUpperCase());
            } else {
                person.setAddressOne(null);
            }
            if (fieldAdrTwo.getText().length() > 0) {
                person.setAddressTwo(fieldAdrTwo.getText().toUpperCase());
            } else {
                person.setAddressTwo(null);
            }
            if (fieldAdrThree.getText().length() > 0) {
                person.setAddressThree(fieldAdrThree.getText().toUpperCase());
            } else {
                person.setAddressThree(null);
            }
            person.setCity(fieldCity.getText().toUpperCase());
            person.setZipcode(fieldZipcode.getText());
            person.setState(comboState.getSelectedItem().toString());
            if (fieldEmail.getText().length() > 0) {
                person.setEmail(fieldEmail.getText());
            } else {
                person.setEmail(null);
            }
            if (fieldPrimaryPhone.getText().isEmpty() == false) {
                person.setPhonePrimary(fieldPrimaryPhone.getText());
            } else {
                person.setPhonePrimary(null);
            }
            if (fieldSecondaryPhone.getText().isEmpty() == false) {
                person.setPhoneSecondary(fieldSecondaryPhone.getText());
            } else {
                person.setPhoneSecondary(null);
            }
            person.setImage(fieldImage);
            person.setPersonDeleted(false);

            // Logon
            logon.setLogonID(0);
            logon.setPersonID(0); // its not known yet
            logon.setLogonName(fieldUsername.getText());
            logon.setPassword(fieldPassword.getText());
            logon.setFirstChallengeQuestion(((SecurityQuestion) comboQuestionOne.getSelectedItem()).getQuestionID());
            logon.setFirstChallengeAnswer(fieldAnswerOne.getText());
            logon.setSecondChallengeQuestion(((SecurityQuestion) comboQuestionTwo.getSelectedItem()).getQuestionID());
            logon.setSecondChallengeAnswer(fieldAnswerTwo.getText());
            logon.setThirdChallengeQuestion(((SecurityQuestion) comboQuestionThree.getSelectedItem()).getQuestionID());
            logon.setThirdChallengeAnswer(fieldAnswerThree.getText());
            logon.setPositionTitle(comboPosition.getSelectedItem().toString());
            logon.setAccountDisabled(false);
            logon.setAccountDeleted(false);

            boolean result = DatabaseManager.save(person, logon);

            if (StateManager.getCurrentUser() == null) {
                new MessageBox(false, "Your account has been successully created! Welcome " + person.getNameFirst(), MessageBox.SUCCESS);
                panelState.changePanel(new PanelLogon(panelState));
            } else {
                if (result) {
                    title.setText(logon.getLogonName() + " was created!");
                    title.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
                    StateManager.refresh = true;
                    resetForm();
                } else {
                    title.setText("Account was not created!");
                    title.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Yellow"));
                }
            }
        } else {
            new MessageBox(true, "This username is already in use! Please pick another one", MessageBox.ERROR);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearFields;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnUploadImage;
    private javax.swing.JComboBox<String> comboPosition;
    private javax.swing.JComboBox<String> comboQuestionOne;
    private javax.swing.JComboBox<String> comboQuestionThree;
    private javax.swing.JComboBox<String> comboQuestionTwo;
    private javax.swing.JComboBox<String> comboState;
    private javax.swing.JComboBox<String> comboSuffix;
    private javax.swing.JTextField fieldAdrOne;
    private javax.swing.JTextField fieldAdrThree;
    private javax.swing.JTextField fieldAdrTwo;
    private javax.swing.JTextField fieldAnswerOne;
    private javax.swing.JTextField fieldAnswerThree;
    private javax.swing.JTextField fieldAnswerTwo;
    private javax.swing.JTextField fieldCity;
    private javax.swing.JTextField fieldEmail;
    private javax.swing.JTextField fieldFirstName;
    private javax.swing.JTextField fieldLastName;
    private javax.swing.JTextField fieldMiddleName;
    private javax.swing.JTextField fieldPassword;
    private javax.swing.JTextField fieldPrimaryPhone;
    private javax.swing.JTextField fieldSecondaryPhone;
    private javax.swing.JTextField fieldTitle;
    private javax.swing.JTextField fieldUsername;
    private javax.swing.JTextField fieldZipcode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labelCreateLogon;
    private javax.swing.JLabel labelPassReq;
    private javax.swing.JLabel labelQuestion;
    private javax.swing.JLabel labelReqFiveA;
    private javax.swing.JLabel labelReqFourA;
    private javax.swing.JLabel labelReqOne;
    private javax.swing.JLabel labelReqOneA;
    private javax.swing.JLabel labelReqThree;
    private javax.swing.JLabel labelReqThreeA;
    private javax.swing.JLabel labelReqTwo;
    private javax.swing.JLabel labelReqTwoA;
    private javax.swing.JLabel labelSecurityQuestions;
    private javax.swing.JLabel labelStepFour;
    private javax.swing.JLabel labelStepThree;
    private javax.swing.JLabel labelStepTwo;
    private javax.swing.JLabel labelUserReq;
    private javax.swing.JPanel panelForm;
    private javax.swing.JPanel panelImage;
    private javax.swing.JPanel panelReq;
    private javax.swing.JProgressBar progressLogonID;
    private javax.swing.JProgressBar progressOverall;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JPanel sectionFivePanel;
    private javax.swing.JPanel sectionFourPanel;
    private javax.swing.JPanel sectionOnePanel;
    private javax.swing.JPanel sectionThreePanel;
    private javax.swing.JPanel sectionTwoPanel;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
