package views.manager.reports;

import entity.InventoryItem;
import entity.Logon;
import entity.Order;
import entity.OrderDetail;
import entity.Person;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Date;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAdjusters;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import util.CartManager;
import util.DatabaseManager;
import util.ReportManager;
import util.StateManager;

public class PanelReports extends javax.swing.JPanel {

    private StateManager panelState;

    private ArrayList<InventoryItem> inventory;
    private Person personSalesReport;
    private Person personAccountReport;

    private final int REPORT_SALES = 0;
    private final int REPORT_PERSON = 1;
    private final int REPORT_INVENTORY = 2;
    private int reportType;

    private boolean accountBoxesLoaded = false;

    private Date start;
    private Date end;

    public PanelReports(StateManager panelState) {
        this.panelState = panelState;

        this.personAccountReport = new Person(-3);
        this.reportType = REPORT_SALES;

        initComponents();
        setup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btnGroup = new javax.swing.ButtonGroup();
        panelAccountOptions = new javax.swing.JPanel();
        panelCustomerCombo = new javax.swing.JPanel();
        comboCustomersTwo = new javax.swing.JComboBox<>();
        panelEmployeeCombo = new javax.swing.JPanel();
        comboEmployees = new javax.swing.JComboBox<>();
        panelManagerCombo = new javax.swing.JPanel();
        comboManagers = new javax.swing.JComboBox<>();
        fieldSelectedPerson = new javax.swing.JTextField();
        panelInventoryOptions = new javax.swing.JPanel();
        labelInfo = new javax.swing.JLabel();
        fieldTodaysDate = new javax.swing.JTextField();
        panelReportTypes = new javax.swing.JPanel();
        toggleSales = new javax.swing.JToggleButton();
        toggleAccounts = new javax.swing.JToggleButton();
        toggleInventory = new javax.swing.JToggleButton();
        panelReport = new javax.swing.JPanel();
        panelSalesOptions = new javax.swing.JPanel();
        panelSalesReports = new javax.swing.JPanel();
        comboCustomers = new javax.swing.JComboBox<>();
        panelComboStart = new javax.swing.JPanel();
        comboStartMonth = new javax.swing.JComboBox<>();
        comboStartDay = new javax.swing.JComboBox<>();
        comboStartYear = new javax.swing.JComboBox<>();
        panelComboEnd = new javax.swing.JPanel();
        comboEndMonth = new javax.swing.JComboBox<>();
        comboEndDay = new javax.swing.JComboBox<>();
        comboEndYear = new javax.swing.JComboBox<>();
        panelQuickButtons = new javax.swing.JPanel();
        btnDateToday = new javax.swing.JButton();
        btnDateWeek = new javax.swing.JButton();
        btnDateYear = new javax.swing.JButton();
        fieldSelectedRange = new javax.swing.JTextField();
        panelGenerate = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        btnGenerateReport = new javax.swing.JButton();
        scrollOverview = new javax.swing.JScrollPane();
        textAreaOverview = new javax.swing.JTextArea();

        panelAccountOptions.setLayout(new java.awt.GridBagLayout());

        panelCustomerCombo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Customer", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelCustomerCombo.setLayout(new java.awt.GridBagLayout());

        comboCustomersTwo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading Customers..." }));
        comboCustomersTwo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboCustomersTwoItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelCustomerCombo.add(comboCustomersTwo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelAccountOptions.add(panelCustomerCombo, gridBagConstraints);

        panelEmployeeCombo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Employee", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelEmployeeCombo.setLayout(new java.awt.GridBagLayout());

        comboEmployees.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading Employees..." }));
        comboEmployees.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboEmployeesItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelEmployeeCombo.add(comboEmployees, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelAccountOptions.add(panelEmployeeCombo, gridBagConstraints);

        panelManagerCombo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Manager", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelManagerCombo.setLayout(new java.awt.GridBagLayout());

        comboManagers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading Managers..." }));
        comboManagers.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboManagersItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelManagerCombo.add(comboManagers, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelAccountOptions.add(panelManagerCombo, gridBagConstraints);

        fieldSelectedPerson.setEditable(false);
        fieldSelectedPerson.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        fieldSelectedPerson.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fieldSelectedPerson.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 153), 3, true), "Selected Person", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 300;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelAccountOptions.add(fieldSelectedPerson, gridBagConstraints);
        fieldSelectedPerson.setText("");

        panelInventoryOptions.setLayout(new java.awt.GridBagLayout());

        labelInfo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        labelInfo.setText("Generate full inventory report");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelInventoryOptions.add(labelInfo, gridBagConstraints);

        fieldTodaysDate.setEditable(false);
        fieldTodaysDate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        fieldTodaysDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fieldTodaysDate.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 153), 3, true), "Today's Date", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 300;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelInventoryOptions.add(fieldTodaysDate, gridBagConstraints);
        fieldSelectedRange.setText("");

        setLayout(new java.awt.GridBagLayout());

        panelReportTypes.setLayout(new java.awt.GridBagLayout());

        toggleSales.setBackground(new java.awt.Color(0, 153, 153));
        btnGroup.add(toggleSales);
        toggleSales.setForeground(new java.awt.Color(255, 255, 255));
        toggleSales.setSelected(true);
        toggleSales.setText("Sales Report");
        toggleSales.setFocusPainted(false);
        toggleSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleSalesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(9, 9, 9, 9);
        panelReportTypes.add(toggleSales, gridBagConstraints);

        toggleAccounts.setBackground(new java.awt.Color(0, 153, 153));
        btnGroup.add(toggleAccounts);
        toggleAccounts.setForeground(new java.awt.Color(255, 255, 255));
        toggleAccounts.setText("Account Report");
        toggleAccounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleAccountsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelReportTypes.add(toggleAccounts, gridBagConstraints);

        toggleInventory.setBackground(new java.awt.Color(0, 153, 153));
        btnGroup.add(toggleInventory);
        toggleInventory.setForeground(new java.awt.Color(255, 255, 255));
        toggleInventory.setText("Inventory Report");
        toggleInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleInventoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelReportTypes.add(toggleInventory, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(panelReportTypes, gridBagConstraints);

        panelReport.setLayout(new java.awt.BorderLayout());

        panelSalesOptions.setLayout(new java.awt.GridBagLayout());

        panelSalesReports.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Customer", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelSalesReports.setLayout(new java.awt.GridBagLayout());

        comboCustomers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading Customers..." }));
        comboCustomers.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboCustomersItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelSalesReports.add(comboCustomers, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelSalesOptions.add(panelSalesReports, gridBagConstraints);

        panelComboStart.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Start Date", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelComboStart.setLayout(new java.awt.GridBagLayout());

        comboStartMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading..." }));
        comboStartMonth.setBorder(javax.swing.BorderFactory.createTitledBorder("Month"));
        comboStartMonth.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 0);
        panelComboStart.add(comboStartMonth, gridBagConstraints);
        comboStartMonth.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    updateDateDays(comboStartMonth, comboStartDay, comboStartYear);
                }
            }
        });

        comboStartDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading..." }));
        comboStartDay.setBorder(javax.swing.BorderFactory.createTitledBorder("Day"));
        comboStartDay.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        panelComboStart.add(comboStartDay, gridBagConstraints);
        comboStartDay.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    setSelectedDateRange();}
            }
        });

        comboStartYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading..." }));
        comboStartYear.setBorder(javax.swing.BorderFactory.createTitledBorder("Year"));
        comboStartYear.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 5);
        panelComboStart.add(comboStartYear, gridBagConstraints);
        comboStartYear.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    setSelectedDateRange();}
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelSalesOptions.add(panelComboStart, gridBagConstraints);

        panelComboEnd.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "End Date", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelComboEnd.setLayout(new java.awt.GridBagLayout());

        comboEndMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading..." }));
        comboEndMonth.setBorder(javax.swing.BorderFactory.createTitledBorder("Month"));
        comboEndMonth.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 0);
        panelComboEnd.add(comboEndMonth, gridBagConstraints);
        comboEndMonth.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED)  {
                    updateDateDays(comboEndMonth, comboEndDay, comboEndYear);
                }
            }
        });

        comboEndDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading..." }));
        comboEndDay.setBorder(javax.swing.BorderFactory.createTitledBorder("Day"));
        comboEndDay.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        panelComboEnd.add(comboEndDay, gridBagConstraints);
        comboEndDay.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    setSelectedDateRange();}
            }
        });

        comboEndYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading..." }));
        comboEndYear.setBorder(javax.swing.BorderFactory.createTitledBorder("Year"));
        comboEndYear.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 5);
        panelComboEnd.add(comboEndYear, gridBagConstraints);
        comboEndYear.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    setSelectedDateRange();}
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelSalesOptions.add(panelComboEnd, gridBagConstraints);

        panelQuickButtons.setLayout(new java.awt.GridBagLayout());

        btnDateToday.setBackground(new java.awt.Color(204, 102, 0));
        btnDateToday.setForeground(new java.awt.Color(255, 255, 255));
        btnDateToday.setText("Today");
        btnDateToday.setEnabled(false);
        btnDateToday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDateTodayActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelQuickButtons.add(btnDateToday, gridBagConstraints);

        btnDateWeek.setBackground(new java.awt.Color(204, 102, 0));
        btnDateWeek.setForeground(new java.awt.Color(255, 255, 255));
        btnDateWeek.setText("This Week");
        btnDateWeek.setEnabled(false);
        btnDateWeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDateWeekActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelQuickButtons.add(btnDateWeek, gridBagConstraints);

        btnDateYear.setBackground(new java.awt.Color(204, 102, 0));
        btnDateYear.setForeground(new java.awt.Color(255, 255, 255));
        btnDateYear.setText("This Year");
        btnDateYear.setEnabled(false);
        btnDateYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDateYearActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelQuickButtons.add(btnDateYear, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelSalesOptions.add(panelQuickButtons, gridBagConstraints);

        fieldSelectedRange.setEditable(false);
        fieldSelectedRange.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        fieldSelectedRange.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fieldSelectedRange.setText("10/24/25 - 12/25/26");
        fieldSelectedRange.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 153), 3, true), "Selected Range", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 300;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelSalesOptions.add(fieldSelectedRange, gridBagConstraints);
        fieldSelectedRange.setText("");

        panelReport.add(panelSalesOptions, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(panelReport, gridBagConstraints);

        panelGenerate.setLayout(new java.awt.GridBagLayout());

        progressBar.setForeground(new java.awt.Color(0, 153, 153));
        progressBar.setBorder(javax.swing.BorderFactory.createTitledBorder("Progress"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 28;
        gridBagConstraints.ipady = 28;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelGenerate.add(progressBar, gridBagConstraints);

        btnGenerateReport.setBackground(new java.awt.Color(0, 153, 153));
        btnGenerateReport.setForeground(new java.awt.Color(255, 255, 255));
        btnGenerateReport.setText("Generate Report");
        btnGenerateReport.setToolTipText("Only active if there are sales to generate");
        btnGenerateReport.setEnabled(false);
        btnGenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateReportActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelGenerate.add(btnGenerateReport, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(panelGenerate, gridBagConstraints);

        scrollOverview.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Report Overview", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N

        textAreaOverview.setEditable(false);
        textAreaOverview.setColumns(20);
        textAreaOverview.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        textAreaOverview.setLineWrap(true);
        textAreaOverview.setRows(5);
        textAreaOverview.setWrapStyleWord(true);
        scrollOverview.setViewportView(textAreaOverview);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(30, 30, 30, 30);
        add(scrollOverview, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void toggleSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleSalesActionPerformed
        // TODO add your handling code here:
        if (toggleSales.isSelected()) {
            panelReport.removeAll();
            panelReport.add(panelSalesOptions, BorderLayout.CENTER);
            btnGenerateReport.setEnabled(false);
            setSelectedDateRange();
            reportType = REPORT_SALES;
            revalidate();
            repaint();
        }
    }//GEN-LAST:event_toggleSalesActionPerformed

    private void toggleAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleAccountsActionPerformed
        // TODO add your handling code here:
        if (toggleAccounts.isSelected()) {
            panelReport.removeAll();
            panelReport.add(panelAccountOptions, BorderLayout.CENTER);
            btnGenerateReport.setEnabled(false);

            if (accountBoxesLoaded == false || StateManager.refresh == true) {
                loadAllAcountBoxes();
                accountBoxesLoaded = true;
            }

            setSelectedPerson();
            reportType = REPORT_PERSON;
            revalidate();
            repaint();
        }
    }//GEN-LAST:event_toggleAccountsActionPerformed

    private void comboCustomersTwoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboCustomersTwoItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED && comboCustomersTwo.hasFocus()) {
            personAccountReport = (Person) comboCustomersTwo.getSelectedItem();
            comboEmployees.setSelectedIndex(0);
            comboManagers.setSelectedIndex(0);
            setSelectedPerson();
        }
    }//GEN-LAST:event_comboCustomersTwoItemStateChanged

    private void comboEmployeesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboEmployeesItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED && comboEmployees.hasFocus()) {
            personAccountReport = (Person) comboEmployees.getSelectedItem();
            comboCustomersTwo.setSelectedIndex(0);
            comboManagers.setSelectedIndex(0);
            setSelectedPerson();
        }
    }//GEN-LAST:event_comboEmployeesItemStateChanged

    private void comboManagersItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboManagersItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED && comboManagers.hasFocus()) {
            personAccountReport = (Person) comboManagers.getSelectedItem();
            comboEmployees.setSelectedIndex(0);
            comboCustomersTwo.setSelectedIndex(0);
            setSelectedPerson();
        }
    }//GEN-LAST:event_comboManagersItemStateChanged

    private void btnGenerateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateReportActionPerformed
        // TODO add your handling code here:
        completeReport();
    }//GEN-LAST:event_btnGenerateReportActionPerformed

    private void comboCustomersItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboCustomersItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            Person person = (Person) comboCustomers.getSelectedItem();
            if (person.getPersonID() >= 0) {
                personSalesReport = person;
            } else {
                personSalesReport = null;
            }
            prepareReport();
        }
    }//GEN-LAST:event_comboCustomersItemStateChanged

    private void btnDateTodayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDateTodayActionPerformed
        // TODO add your handling code here:
        LocalDate now = LocalDate.now();

        comboStartMonth.setSelectedItem(now.getMonthValue());
        comboStartDay.setSelectedItem(now.getDayOfMonth());
        comboStartYear.setSelectedItem(now.getYear());

        comboEndMonth.setSelectedItem(now.getMonthValue());
        comboEndDay.setSelectedItem(now.getDayOfMonth());
        comboEndYear.setSelectedItem(now.getYear());
    }//GEN-LAST:event_btnDateTodayActionPerformed

    private void btnDateWeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDateWeekActionPerformed
        // TODO add your handling code here:
        LocalDate now = LocalDate.now();
        LocalDate startOfWeek = now.with(DayOfWeek.MONDAY).minusDays(1);
        LocalDate endOfWeek = now.with(DayOfWeek.SUNDAY).minusDays(1);

        comboStartMonth.setSelectedItem(startOfWeek.getMonthValue());
        comboStartDay.setSelectedItem(startOfWeek.getDayOfMonth());
        comboStartYear.setSelectedItem(startOfWeek.getYear());

        comboEndMonth.setSelectedItem(endOfWeek.getMonthValue());
        comboEndDay.setSelectedItem(endOfWeek.getDayOfMonth());
        comboEndYear.setSelectedItem(endOfWeek.getYear());
    }//GEN-LAST:event_btnDateWeekActionPerformed

    private void btnDateYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDateYearActionPerformed
        // TODO add your handling code here:
        LocalDate now = LocalDate.now();
        LocalDate startOfYear = now.with(TemporalAdjusters.firstDayOfYear());
        LocalDate endOfYear = now.with(TemporalAdjusters.lastDayOfYear());

        comboStartMonth.setSelectedItem(startOfYear.getMonthValue());
        comboStartDay.setSelectedItem(startOfYear.getDayOfMonth());
        comboStartYear.setSelectedItem(startOfYear.getYear());

        comboEndMonth.setSelectedItem(endOfYear.getMonthValue());
        comboEndDay.setSelectedItem(endOfYear.getDayOfMonth());
        comboEndYear.setSelectedItem(endOfYear.getYear());
    }//GEN-LAST:event_btnDateYearActionPerformed

    private void toggleInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleInventoryActionPerformed
        // TODO add your handling code here:
        if (toggleInventory.isSelected()) {
            panelReport.removeAll();
            panelReport.add(panelInventoryOptions, BorderLayout.CENTER);
            btnGenerateReport.setEnabled(true);
            reportType = REPORT_INVENTORY;
            setSelectedInventory();
            revalidate();
            repaint();
        }

    }//GEN-LAST:event_toggleInventoryActionPerformed

    public void setup() {
        loadSalesBoxes();
        loadDateBoxes();

        fieldSelectedRange.setText("");
        fieldSelectedRange.setBorder(javax.swing.BorderFactory.createTitledBorder(
                new javax.swing.border.LineBorder(
                        StateManager.COLOR_ORANGE, 3, true),
                "Selected Range", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12)));
    }

    private void loadSalesBoxes() {
        Thread loadSalesBoxes = new Thread(() -> {
            ArrayList<Person> customers = DatabaseManager.getCustomersWithTitle("Customer");

            Person empty = new Person(-2);

            customers.add(0, empty);

            comboCustomers.setModel(new DefaultComboBoxModel(customers.toArray()));
        });

        loadSalesBoxes.start();

    }

    private void loadAllAcountBoxes() {
        Thread loadAllAccountBoxes = new Thread(() -> {
            ArrayList<Person> customersTwo = DatabaseManager.getCustomersWithTitle("Customer");
            ArrayList<Person> employees = DatabaseManager.getCustomersWithTitle("Employee");
            ArrayList<Person> managers = DatabaseManager.getCustomersWithTitle("Manager");

            Person emptyTwo = new Person(-3);

            customersTwo.add(0, emptyTwo);
            employees.add(0, emptyTwo);
            managers.add(0, emptyTwo);

            comboCustomersTwo.setModel(new DefaultComboBoxModel(customersTwo.toArray()));
            comboEmployees.setModel(new DefaultComboBoxModel(employees.toArray()));
            comboManagers.setModel(new DefaultComboBoxModel(managers.toArray()));

            btnGenerateReport.setEnabled(false);          
        });

        loadAllAccountBoxes.start();
    }

    private void loadDateBoxes() {
        Thread loadDates = new Thread(() -> {
            Date minDate = DatabaseManager.getSaleDate(false);
            Date maxDate = DatabaseManager.getSaleDate(true);

            // get min and max date
            if (minDate != null && maxDate != null) {
                Calendar start = Calendar.getInstance();
                Calendar end = Calendar.getInstance();

                start.setTime(minDate);
                end.setTime(maxDate);

                int startDaysMax = start.getActualMaximum(Calendar.DAY_OF_MONTH);
                int endDaysMax = end.getActualMaximum(Calendar.DAY_OF_MONTH);
                int startYear = start.get(Calendar.YEAR);
                int endYear = end.get(Calendar.YEAR);

                ArrayList<Integer> monthOne = new ArrayList(), monthTwo = new ArrayList();
                ArrayList<Integer> dayOne = new ArrayList(), dayTwo = new ArrayList();
                ArrayList<Integer> yearOne = new ArrayList(), yearTwo = new ArrayList();

                // MONTHS
                for (int i = 1; i <= 12; i++) {
                    monthOne.add(i);
                    monthTwo.add(i);
                }

                // DAYS
                for (int i = 1; i <= startDaysMax; i++) {
                    dayOne.add(i);
                }
                for (int i = 1; i <= endDaysMax; i++) {
                    dayTwo.add(i);
                }

                // YEARS
                for (int i = startYear; i <= endYear; i++) {
                    yearOne.add(i);
                    yearTwo.add(i);
                }

                comboStartMonth.setModel(new DefaultComboBoxModel(monthOne.toArray()));
                comboStartDay.setModel(new DefaultComboBoxModel(dayOne.toArray()));
                comboStartYear.setModel(new DefaultComboBoxModel(yearOne.toArray()));

                comboEndMonth.setModel(new DefaultComboBoxModel(monthTwo.toArray()));
                comboEndDay.setModel(new DefaultComboBoxModel(dayTwo.toArray()));
                comboEndYear.setModel(new DefaultComboBoxModel(yearTwo.toArray()));

                comboStartMonth.setEnabled(true);
                comboStartDay.setEnabled(true);
                comboStartYear.setEnabled(true);

                comboEndMonth.setEnabled(true);
                comboEndDay.setEnabled(true);
                comboEndYear.setEnabled(true);

                btnDateToday.setEnabled(true);
                btnDateWeek.setEnabled(true);
                btnDateYear.setEnabled(true);

                setSelectedDateRange();

                revalidate();
                repaint();
            }
        });

        loadDates.start();
    }

    private void updateDateDays(JComboBox comboMonthBox, JComboBox comboDayBox, JComboBox comboYearBox) {
        Calendar start = Calendar.getInstance();

        ArrayList<Integer> dayOne = new ArrayList();

        start.set(Calendar.YEAR, (int) comboYearBox.getSelectedItem() - 1);
        // start.set(Calendar.DAY_OF_MONTH, (int) comboDayBox.getSelectedItem());
        start.set(Calendar.MONTH, (int) comboMonthBox.getSelectedItem() - 1);

        int startDaysMax = start.getActualMaximum(Calendar.DAY_OF_MONTH);

        for (int i = 1; i <= startDaysMax; i++) {
            dayOne.add(i);
        }

        comboDayBox.setModel(new DefaultComboBoxModel(dayOne.toArray()));

        setSelectedDateRange();
    }

    private void setSelectedDateRange() {
        StringBuilder dateBuilder = new StringBuilder();
        DateTimeFormatter format = DateTimeFormatter.ofPattern("MMMM d, yyyy");

        LocalDate startDate = LocalDate.of((int) comboStartYear.getSelectedItem(), (int) comboStartMonth.getSelectedItem(), (int) comboStartDay.getSelectedItem());
        LocalDate endDate = LocalDate.of((int) comboEndYear.getSelectedItem(), (int) comboEndMonth.getSelectedItem(), (int) comboEndDay.getSelectedItem());

        if (endDate.isBefore(startDate)) {
            comboEndMonth.setSelectedItem(comboStartMonth.getSelectedItem());
            comboEndDay.setSelectedItem(comboStartDay.getSelectedItem());
            comboEndYear.setSelectedItem(comboStartYear.getSelectedItem());
            endDate = startDate;
        }

        String startString = format.format(startDate);
        String endString = format.format(endDate);

        dateBuilder.append(startString).append(" - ").append(endString);

        fieldSelectedRange.setText(dateBuilder.toString());
        fieldSelectedRange.setBorder(javax.swing.BorderFactory.createTitledBorder(
                new javax.swing.border.LineBorder(
                        StateManager.COLOR_CYAN, 3, true),
                "Selected Range", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12)));

        startDate = LocalDate.of((int) comboStartYear.getSelectedItem(), (int) comboStartMonth.getSelectedItem(), (int) comboStartDay.getSelectedItem());
        endDate = LocalDate.of((int) comboEndYear.getSelectedItem(), (int) comboEndMonth.getSelectedItem(), (int) comboEndDay.getSelectedItem());

        start = java.sql.Date.valueOf(startDate);
        end = java.sql.Date.valueOf(endDate);

        prepareReport();
    }

    private void setSelectedPerson() {
        String personName = (personAccountReport.getPersonID() >= 0) ? personAccountReport.getNameFirst() + " " + personAccountReport.getNameLast() : "";
        boolean canGenerate = (personAccountReport.getPersonID() >= 0) ? true : false;
        Color borderColor = (canGenerate) ? StateManager.COLOR_CYAN : StateManager.COLOR_ORANGE;
        String textAreaText = (canGenerate) ? personAccountReport.toStringExtended() : "";

        textAreaOverview.setText(textAreaText);
        fieldSelectedPerson.setText(personName);
        fieldSelectedPerson.setBorder(javax.swing.BorderFactory.createTitledBorder(
                new javax.swing.border.LineBorder(
                        borderColor, 3, true),
                "Selected Person", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12)));

        btnGenerateReport.setEnabled(canGenerate);
    }

    private void setSelectedInventory() {
        LocalDate todaysDate = LocalDate.now();
        DateTimeFormatter format = DateTimeFormatter.ofPattern("MMMM d, yyyy");
        String strToday = format.format(todaysDate);

        inventory = DatabaseManager.getInventoryItems("", -1, 10000, "None", 0);

        textAreaOverview.setText("Total Items in Inventory: \n" + inventory.size());

        fieldTodaysDate.setText(strToday);
    }

    private void prepareReport() {
        Thread prepareReport = new Thread(() -> {
            int sales = (personSalesReport != null) ? DatabaseManager.getSalesCount(personSalesReport.getPersonID(), start, end) : DatabaseManager.getSalesCount(start, end);

            String customerName = (personSalesReport != null) ? personSalesReport.getNameFirst() : "All Customers";

            StringBuilder builder = new StringBuilder();
            builder.append("Total Sales Recorded (").append(customerName).append("):\n").append(sales).append("\n\n");
            if (sales > 0) {
                btnGenerateReport.setEnabled(true);
                fieldSelectedRange.setBorder(javax.swing.BorderFactory.createTitledBorder(
                        new javax.swing.border.LineBorder(
                                StateManager.COLOR_CYAN, 3, true),
                        "Selected Range", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                        javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12)));
            } else {
                btnGenerateReport.setEnabled(false);
                fieldSelectedRange.setBorder(javax.swing.BorderFactory.createTitledBorder(
                        new javax.swing.border.LineBorder(
                                StateManager.COLOR_ORANGE, 3, true),
                        "Selected Range", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                        javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12)));
                builder.append("None");
            }
            textAreaOverview.setText(null);
            textAreaOverview.setText(builder.toString());
        });

        prepareReport.start();

    }

    private void completeReport() {
        btnGenerateReport.setEnabled(false);
        btnGenerateReport.setText("Generating Report...");

        progressBar.setValue(0);

        Thread generateReport = new Thread(() -> {
            switch (reportType) {
                case REPORT_SALES:
                    ArrayList<CartManager> orderCalculations = new ArrayList<>();
                    ArrayList<Order> orders = (personSalesReport != null)
                            ? DatabaseManager.getOrders(personSalesReport.getPersonID(), start, end)
                            : DatabaseManager.getOrders(start, end);

                    progressBar.setMaximum(orders.size() + 1);

                    for (Order order : orders) {
                        CartManager checkoutCart = new CartManager(null);
                        checkoutCart.setDiscount(DatabaseManager.getDiscount(order.getDiscountID()));

                        for (OrderDetail detail : order.getDetails()) {
                            InventoryItem item = DatabaseManager.getInventoryItem(detail.getInventoryID());

                            int quantity = detail.getQuantity();
                            checkoutCart.addItem(item, quantity);

                        }
                        progressBar.setValue(progressBar.getValue() + 1);
                        orderCalculations.add(checkoutCart);
                    }

                    ReportManager.generateSalesReport(personSalesReport, start.toLocalDate(), end.toLocalDate(), orders, orderCalculations);
                    progressBar.setValue(progressBar.getValue() + 1);

                    break;
                case REPORT_PERSON:
                    Logon logon = DatabaseManager.getLogon(personAccountReport.getPersonID());

                    personAccountReport.setLogon(logon);

                    progressBar.setMaximum(1);
                    progressBar.setValue(1);

                    ReportManager.generatePersonReport(personAccountReport);

                    break;
                case REPORT_INVENTORY:

                    progressBar.setMaximum(1);

                    progressBar.setValue(1);

                    inventory = DatabaseManager.getInventoryItems("", -1, 10000, "None", 0);

                    ReportManager.generateInventoryReport(inventory);

                    break;
            }

            progressBar.setValue(0);
            btnGenerateReport.setText("Generate Report");
            btnGenerateReport.setEnabled(true);
            textAreaOverview.setText("Report Succesfully Generated");
        });

        generateReport.start();
    }

    public void reload() {
        loadSalesBoxes();

        if (accountBoxesLoaded == true) {
            loadAllAcountBoxes();
        }

        btnGenerateReport.setEnabled(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDateToday;
    private javax.swing.JButton btnDateWeek;
    private javax.swing.JButton btnDateYear;
    private javax.swing.JButton btnGenerateReport;
    private javax.swing.ButtonGroup btnGroup;
    private javax.swing.JComboBox<String> comboCustomers;
    private javax.swing.JComboBox<String> comboCustomersTwo;
    private javax.swing.JComboBox<String> comboEmployees;
    private javax.swing.JComboBox<String> comboEndDay;
    private javax.swing.JComboBox<String> comboEndMonth;
    private javax.swing.JComboBox<String> comboEndYear;
    private javax.swing.JComboBox<String> comboManagers;
    private javax.swing.JComboBox<String> comboStartDay;
    private javax.swing.JComboBox<String> comboStartMonth;
    private javax.swing.JComboBox<String> comboStartYear;
    private javax.swing.JTextField fieldSelectedPerson;
    private javax.swing.JTextField fieldSelectedRange;
    private javax.swing.JTextField fieldTodaysDate;
    private javax.swing.JLabel labelInfo;
    private javax.swing.JPanel panelAccountOptions;
    private javax.swing.JPanel panelComboEnd;
    private javax.swing.JPanel panelComboStart;
    private javax.swing.JPanel panelCustomerCombo;
    private javax.swing.JPanel panelEmployeeCombo;
    private javax.swing.JPanel panelGenerate;
    private javax.swing.JPanel panelInventoryOptions;
    private javax.swing.JPanel panelManagerCombo;
    private javax.swing.JPanel panelQuickButtons;
    private javax.swing.JPanel panelReport;
    private javax.swing.JPanel panelReportTypes;
    private javax.swing.JPanel panelSalesOptions;
    private javax.swing.JPanel panelSalesReports;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JScrollPane scrollOverview;
    private javax.swing.JTextArea textAreaOverview;
    private javax.swing.JToggleButton toggleAccounts;
    private javax.swing.JToggleButton toggleInventory;
    private javax.swing.JToggleButton toggleSales;
    // End of variables declaration//GEN-END:variables
}
