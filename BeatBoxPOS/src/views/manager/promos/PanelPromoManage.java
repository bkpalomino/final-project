package views.manager.promos;

import entity.Discount;
import entity.InventoryItem;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Date;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Objects;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import util.CartManager;
import util.DatabaseManager;
import util.StateManager;

/**
 *
 * @author MrBea
 */
public class PanelPromoManage extends javax.swing.JPanel {

    private StateManager panelState;

    private ArrayList<Discount> discounts;
    private ArrayList<InventoryItem> items;
    private DefaultTableModel dtm;

    private Discount currentSelectedPromo;
    private Discount currentEditPromo;

    private Discount constructedDiscount;

    private InventoryItem targetItem;

    private Date start;
    private Date expiration;

    private int promoCodeYearLimitation = 5;

    public PanelPromoManage(StateManager panelState) {
        this.panelState = panelState;
        dtm = new DefaultTableModel(new String[]{"ID", "Code", "Level", "Type", "Item ID", "Percentage", "Dollar Amt", "Start", "Exp Date"}, 0);

        initComponents();
        loadComboBoxes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        labelSelectItem = new javax.swing.JLabel();
        btnDeleteSelected = new javax.swing.JButton();
        panelControls = new javax.swing.JPanel();
        fieldSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        labelNotification = new javax.swing.JLabel();
        panelManageCenterScreen = new javax.swing.JPanel();
        splitPane = new javax.swing.JSplitPane();
        panelSelect = new javax.swing.JPanel();
        btnEditPromo = new javax.swing.JButton();
        scrollPromos = new javax.swing.JScrollPane();
        tablePromos = new javax.swing.JTable();
        panelEdit = new javax.swing.JPanel();
        panelEditFields = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        panelForm = new javax.swing.JPanel();
        sectionOnePanel = new javax.swing.JPanel();
        fieldCodeName = new javax.swing.JTextField();
        comboLevel = new javax.swing.JComboBox<>();
        comboType = new javax.swing.JComboBox<>();
        comboTargetItem = new javax.swing.JComboBox<>();
        fieldAmount = new javax.swing.JTextField();
        labelAmount = new javax.swing.JLabel();
        fieldPromoDescription = new javax.swing.JTextField();
        sectionTwoPanel = new javax.swing.JPanel();
        panelComboStart = new javax.swing.JPanel();
        comboStartMonth = new javax.swing.JComboBox<>();
        comboStartDay = new javax.swing.JComboBox<>();
        comboStartYear = new javax.swing.JComboBox<>();
        checkStart = new javax.swing.JCheckBox();
        panelComboEnd = new javax.swing.JPanel();
        comboEndMonth = new javax.swing.JComboBox<>();
        comboEndDay = new javax.swing.JComboBox<>();
        comboEndYear = new javax.swing.JComboBox<>();
        panelSelectedDate = new javax.swing.JPanel();
        fieldSelectedRange = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnDeletePromo = new javax.swing.JButton();
        checkUnavailable = new javax.swing.JCheckBox();

        labelSelectItem.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelSelectItem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSelectItem.setText("Select an Item to Edit");

        btnDeleteSelected.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        btnDeleteSelected.setText("Delete Selected");
        btnDeleteSelected.setEnabled(false);
        btnDeleteSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSelectedActionPerformed(evt);
            }
        });

        setLayout(new java.awt.BorderLayout());

        panelControls.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelControls.setLayout(new java.awt.GridBagLayout());

        fieldSearch.setBackground(new java.awt.Color(60, 63, 65));
        fieldSearch.setToolTipText("");
        fieldSearch.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 153), 2, true), "Search Promos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        fieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldSearchKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 127;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 20, 3, 1);
        panelControls.add(fieldSearch, gridBagConstraints);

        btnSearch.setBackground(new java.awt.Color(0, 153, 153));
        btnSearch.setText("ðŸ”Ž");
        btnSearch.setName("Action"); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelControls.add(btnSearch, gridBagConstraints);

        labelNotification.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        labelNotification.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNotification.setText("Promo Updated");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        panelControls.add(labelNotification, gridBagConstraints);
        labelNotification.setText(" ");

        add(panelControls, java.awt.BorderLayout.NORTH);

        panelManageCenterScreen.setLayout(new java.awt.BorderLayout());

        panelSelect.setLayout(new java.awt.GridBagLayout());

        btnEditPromo.setBackground(new java.awt.Color(0, 153, 153));
        btnEditPromo.setText("Edit Promo");
        btnEditPromo.setEnabled(false);
        btnEditPromo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPromoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelSelect.add(btnEditPromo, gridBagConstraints);

        scrollPromos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Promos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N

        tablePromos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollPromos.setViewportView(tablePromos);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelSelect.add(scrollPromos, gridBagConstraints);

        splitPane.setLeftComponent(panelSelect);

        panelEdit.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Edit Panel", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelEdit.setLayout(new java.awt.BorderLayout());

        panelEditFields.setLayout(new java.awt.GridBagLayout());

        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        panelForm.setMinimumSize(new java.awt.Dimension(100, 106));
        panelForm.setLayout(new java.awt.GridBagLayout());

        sectionOnePanel.setLayout(new java.awt.GridBagLayout());

        fieldCodeName.setToolTipText("Ex: \"BETA\", \"CODE\"");
        fieldCodeName.setBorder(javax.swing.BorderFactory.createTitledBorder("Code Name"));
        fieldCodeName.setName("usernameField"); // NOI18N
        fieldCodeName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionOnePanel.add(fieldCodeName, gridBagConstraints);

        comboLevel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2" }));
        comboLevel.setBorder(javax.swing.BorderFactory.createTitledBorder("Level"));
        comboLevel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboLevelItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionOnePanel.add(comboLevel, gridBagConstraints);

        comboType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2" }));
        comboType.setBorder(javax.swing.BorderFactory.createTitledBorder("Type"));
        comboType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboTypeItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionOnePanel.add(comboType, gridBagConstraints);

        comboTargetItem.setBorder(javax.swing.BorderFactory.createTitledBorder("Target Item"));
        comboTargetItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboTargetItemItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionOnePanel.add(comboTargetItem, gridBagConstraints);

        fieldAmount.setBorder(javax.swing.BorderFactory.createTitledBorder("Amount"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionOnePanel.add(fieldAmount, gridBagConstraints);
        fieldAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        labelAmount.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelAmount.setText("100% or $50.00");
        labelAmount.setBorder(javax.swing.BorderFactory.createTitledBorder("Amount"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(9, 9, 9, 9);
        sectionOnePanel.add(labelAmount, gridBagConstraints);

        fieldPromoDescription.setBorder(javax.swing.BorderFactory.createTitledBorder("Description"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionOnePanel.add(fieldPromoDescription, gridBagConstraints);
        fieldPromoDescription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        panelForm.add(sectionOnePanel, gridBagConstraints);

        sectionTwoPanel.setLayout(new java.awt.GridBagLayout());

        panelComboStart.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Start Date (Optional)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelComboStart.setLayout(new java.awt.GridBagLayout());

        comboStartMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading..." }));
        comboStartMonth.setBorder(javax.swing.BorderFactory.createTitledBorder("Month"));
        comboStartMonth.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 0);
        panelComboStart.add(comboStartMonth, gridBagConstraints);
        comboStartMonth.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    updateDateDays(comboStartMonth, comboStartDay, comboStartYear);

                }
            }
        });

        comboStartDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading..." }));
        comboStartDay.setBorder(javax.swing.BorderFactory.createTitledBorder("Day"));
        comboStartDay.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        panelComboStart.add(comboStartDay, gridBagConstraints);
        comboStartDay.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    setSelectedDateRange();}
            }
        });

        comboStartYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading..." }));
        comboStartYear.setBorder(javax.swing.BorderFactory.createTitledBorder("Year"));
        comboStartYear.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 5);
        panelComboStart.add(comboStartYear, gridBagConstraints);
        comboStartYear.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    setSelectedDateRange();}
            }
        });

        checkStart.setSelected(true);
        checkStart.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkStartItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelComboStart.add(checkStart, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionTwoPanel.add(panelComboStart, gridBagConstraints);

        panelComboEnd.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Expiration Date (Required)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        panelComboEnd.setLayout(new java.awt.GridBagLayout());

        comboEndMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading..." }));
        comboEndMonth.setBorder(javax.swing.BorderFactory.createTitledBorder("Month"));
        comboEndMonth.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 0);
        panelComboEnd.add(comboEndMonth, gridBagConstraints);
        comboEndMonth.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED)  {
                    updateDateDays(comboEndMonth, comboEndDay, comboEndYear);
                }
            }
        });

        comboEndDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading..." }));
        comboEndDay.setBorder(javax.swing.BorderFactory.createTitledBorder("Day"));
        comboEndDay.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        panelComboEnd.add(comboEndDay, gridBagConstraints);
        comboEndDay.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    setSelectedDateRange();}
            }
        });

        comboEndYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading..." }));
        comboEndYear.setBorder(javax.swing.BorderFactory.createTitledBorder("Year"));
        comboEndYear.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 5);
        panelComboEnd.add(comboEndYear, gridBagConstraints);
        comboEndYear.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    setSelectedDateRange();}
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionTwoPanel.add(panelComboEnd, gridBagConstraints);

        panelSelectedDate.setLayout(new java.awt.GridBagLayout());

        fieldSelectedRange.setEditable(false);
        fieldSelectedRange.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        fieldSelectedRange.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fieldSelectedRange.setText("10/24/25 - 12/25/26");
        fieldSelectedRange.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 153), 3, true), "Selected Range", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelSelectedDate.add(fieldSelectedRange, gridBagConstraints);
        fieldSelectedRange.setText("");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sectionTwoPanel.add(panelSelectedDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        panelForm.add(sectionTwoPanel, gridBagConstraints);

        scrollPane.setViewportView(panelForm);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelEditFields.add(scrollPane, gridBagConstraints);
        scrollPane.getVerticalScrollBar().setUnitIncrement(16);

        btnUpdate.setBackground(new java.awt.Color(0, 153, 153));
        btnUpdate.setText("Update");
        btnUpdate.setName("Update"); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelEditFields.add(btnUpdate, gridBagConstraints);

        btnDeletePromo.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        btnDeletePromo.setText("Delete Promo");
        btnDeletePromo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePromoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelEditFields.add(btnDeletePromo, gridBagConstraints);

        checkUnavailable.setText("Unavailable");
        checkUnavailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkUnavailableActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelEditFields.add(checkUnavailable, gridBagConstraints);

        panelEdit.add(panelEditFields, java.awt.BorderLayout.CENTER);

        splitPane.setRightComponent(panelEdit);

        panelManageCenterScreen.add(splitPane, java.awt.BorderLayout.CENTER);

        add(panelManageCenterScreen, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void fieldSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldSearchKeyReleased
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_fieldSearchKeyReleased

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:        
        boolean result = DatabaseManager.save(constructedDiscount);
        String notification = (result) ? constructedDiscount.getDiscountCode() + " Updated" : "Error, Please try again! ";

        labelNotification.setText(notification);
        if (result) {
            labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        } else {
            labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Yellow"));
        }

        if (constructedDiscount.getInventoryID() == null) {
            constructedDiscount.setInventoryID(0);
        }

        currentEditPromo = constructedDiscount;

        StateManager.refresh = true;

        btnUpdate.setEnabled(false);
        populateTable();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeletePromoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePromoActionPerformed
        // TODO add your handling code here:
        boolean result = DatabaseManager.delete(currentEditPromo);
        String notification = (result) ? currentEditPromo.getDiscountCode() + " Deleted" : "Error, Item not deleted!";

        labelNotification.setText(notification);
        if (result) {
            labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        } else {
            labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Yellow"));
        }

        setEditPromo(null);

        btnDeleteSelected.setEnabled(false);
        btnEditPromo.setEnabled(false);

        populateTable();
    }//GEN-LAST:event_btnDeletePromoActionPerformed

    private void btnEditPromoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPromoActionPerformed
        // TODO add your handling code here:
        if (tablePromos.getSelectedRow() != -1) {
            panelEdit.removeAll();
            panelEdit.add(panelEditFields, BorderLayout.CENTER);
            setEditPromo(currentSelectedPromo);
            panelEdit.revalidate();
            panelEdit.repaint();
        }
    }//GEN-LAST:event_btnEditPromoActionPerformed

    private void btnDeleteSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSelectedActionPerformed
        // TODO add your handling code here:
        boolean result = DatabaseManager.delete(currentSelectedPromo);
        String notification = (result) ? currentSelectedPromo.getDiscountCode() + " Deleted" : "Error, Item not deleted!";

        labelNotification.setText(notification);
        if (result) {
            labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        } else {
            labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Yellow"));
        }

        if (currentSelectedPromo.getDiscountID() == currentEditPromo.getDiscountID()) {
            setEditPromo(null);
        }

        btnDeleteSelected.setEnabled(false);
        btnEditPromo.setEnabled(false);

        populateTable();
    }//GEN-LAST:event_btnDeleteSelectedActionPerformed

    private void comboLevelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboLevelItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            int level = Integer.parseInt((String) comboLevel.getSelectedItem());

            if (level == 1) {
                comboType.setEnabled(true);
                comboTargetItem.setEnabled(true);
                comboTargetItem.setSelectedIndex(0);
                comboLevel.setBorder(javax.swing.BorderFactory.createTitledBorder("Level: Item specific"));
            } else if (level == 2) {
                comboType.setEnabled(false);
                comboTargetItem.setEnabled(false);
                comboTargetItem.setSelectedIndex(0);
                comboLevel.setBorder(javax.swing.BorderFactory.createTitledBorder("Level: Whole order"));
            }

            validateForm();
        }
    }//GEN-LAST:event_comboLevelItemStateChanged

    private void comboTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboTypeItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            int type = Integer.parseInt((String) comboType.getSelectedItem());

            if (type == 1) {
                comboType.setBorder(javax.swing.BorderFactory.createTitledBorder("Type: Percent Amount"));
                fieldAmount.setBorder(javax.swing.BorderFactory.createTitledBorder("Amount: Percent Amount"));
            } else if (type == 2) {
                comboType.setBorder(javax.swing.BorderFactory.createTitledBorder("Type: Dollar Amount"));
                fieldAmount.setBorder(javax.swing.BorderFactory.createTitledBorder("Amount: Dollar Amount"));
            }

            validateForm();

        }
    }//GEN-LAST:event_comboTypeItemStateChanged

    private void comboTargetItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboTargetItemItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            validateForm();
        }

    }//GEN-LAST:event_comboTargetItemItemStateChanged

    private void checkStartItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkStartItemStateChanged
        // TODO add your handling code here:
        comboStartMonth.setEnabled(checkStart.isSelected());
        comboStartDay.setEnabled(checkStart.isSelected());
        comboStartYear.setEnabled(checkStart.isSelected());
        setSelectedDateRange();

        validateForm();
    }//GEN-LAST:event_checkStartItemStateChanged

    private void checkUnavailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkUnavailableActionPerformed
        // TODO add your handling code here:
        validateForm();
    }//GEN-LAST:event_checkUnavailableActionPerformed

    // Methods
    private void enableEditing(boolean enabled) {
        for (Component c : panelEdit.getComponents()) {
            c.setEnabled(enabled);
        }
        btnUpdate.setEnabled(false);
    }

    public void populateTable() {
        String search = fieldSearch.getText();

        tablePromos.setModel(dtm);

        if (currentEditPromo == null) {
            panelEdit.removeAll();
            panelEdit.add(labelSelectItem, BorderLayout.CENTER);
            revalidate();
            repaint();
        }

        btnDeleteSelected.setEnabled(false);
        btnEditPromo.setEnabled(false);

        SwingWorker<ArrayList<Discount>, Void> worker = new SwingWorker<ArrayList<Discount>, Void>() {
            @Override
            protected ArrayList<Discount> doInBackground() throws Exception {
                ArrayList<Discount> discounts = DatabaseManager.getDiscounts(search);
                return discounts;
            }

            @Override
            protected void done() {
                try {
                    discounts = get();

                    scrollPromos.setViewportView(tablePromos);

                    if (discounts.size() > 0) {
                        String[] cols = new String[]{"ID", "Code", "Level", "Type", "Item ID", "Percentage", "Dollar Amt", "Start", "Exp Date"};
                        Object[][] data = new Object[discounts.size()][cols.length];

                        for (int i = 0; i < discounts.size(); i++) {
                            Discount curDiscount = discounts.get(i);
                            data[i][0] = curDiscount.getDiscountID();
                            data[i][1] = curDiscount.getDiscountCode();
                            data[i][2] = (curDiscount.getDiscountLevel() != null) ? curDiscount.getDiscountLevel() : "NULL";
                            data[i][3] = (curDiscount.getDiscountType() != null) ? curDiscount.getDiscountType() : "NULL";
                            data[i][4] = (curDiscount.getInventoryID() != null) ? curDiscount.getInventoryID() : "NULL";
                            data[i][5] = (curDiscount.getDiscountPercentage() != null) ? curDiscount.getDiscountPercentage() : "NULL";
                            data[i][6] = (curDiscount.getDiscountDollarAmount() != null) ? curDiscount.getDiscountDollarAmount() : "NULL";
                            data[i][7] = curDiscount.getStartDate();
                            data[i][8] = curDiscount.getExpirationDate();
                        }

                        DefaultTableModel activeTableModel = new DefaultTableModel(data, cols);

                        tablePromos.setModel(activeTableModel);

                        tablePromos.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
                            @Override
                            public void valueChanged(ListSelectionEvent e) {
                                if (!e.getValueIsAdjusting()) {
                                    int selectedRow = tablePromos.getSelectedRow();

                                    if (selectedRow < tablePromos.getRowCount() && selectedRow != -1) {
                                        TableModel mod = tablePromos.getModel();
                                        for (Discount discount : discounts) {
                                            if (discount.getDiscountID() == (int) mod.getValueAt(selectedRow, 0)) {
                                                currentSelectedPromo = discount;

                                                btnDeleteSelected.setEnabled(true);
                                                btnEditPromo.setEnabled(true);
                                                break;
                                            }
                                        }

                                    } else {
                                        if (currentEditPromo == null) {
                                            panelEdit.removeAll();
                                            panelEdit.add(labelSelectItem, BorderLayout.CENTER);

                                        }
                                    }
                                }
                            }
                        });
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        };
        worker.execute();
    }

    private void setEditPromo(Discount promo) {
        currentEditPromo = currentSelectedPromo;

        if (promo != null) {
            int targetItemIndex = 0;
            if (promo.getInventoryID() != null) {
                for (int i = 0; i < items.size(); i++) {
                    if (items.get(i).getInventoryID() == promo.getInventoryID()) {
                        targetItemIndex = i;
                        break;
                    }
                }
            }

            Double percentAmt = promo.getDiscountPercentage();
            Double dollarAmt = promo.getDiscountDollarAmount();
            LocalDate startDate = (promo.getStartDate() != null) ? ((Date) promo.getStartDate()).toLocalDate() : null;
            LocalDate endDate = ((Date) promo.getExpirationDate()).toLocalDate();

            fieldCodeName.setText(promo.getDiscountCode());
            fieldPromoDescription.setText(promo.getDescription());
            comboLevel.setSelectedItem(String.valueOf(promo.getDiscountLevel()));
            comboType.setSelectedItem(String.valueOf(promo.getDiscountType()));
            checkUnavailable.setSelected(promo.getUnavailable());
            
            switch (promo.getDiscountLevel()) {
                case 1:
                    comboLevel.setBorder(javax.swing.BorderFactory.createTitledBorder("Level: Item specific"));
                    comboTargetItem.setEnabled(true);
                    comboTargetItem.setSelectedIndex(targetItemIndex);
                    break;
                case 2:
                    comboTargetItem.setEnabled(false);
                    comboLevel.setBorder(javax.swing.BorderFactory.createTitledBorder("Level: Whole order"));
                    comboTargetItem.setEnabled(false);
                    break;
            }

            switch (promo.getDiscountType()) {
                case 1:
                    double pAmt = percentAmt * 100;
                    fieldAmount.setText(String.valueOf((int) pAmt));
                    labelAmount.setText(CartManager.doubleAsPercantage(percentAmt));
                    break;
                case 2:
                    fieldAmount.setText(String.valueOf(dollarAmt));
                    labelAmount.setText(CartManager.doubleAsCurrency(dollarAmt));
                    break;
            }

            if (startDate != null) {
                comboStartMonth.setSelectedItem(startDate.getMonthValue());
                comboStartDay.setSelectedItem(startDate.getDayOfMonth());
                comboStartYear.setSelectedItem(startDate.getYear());
                comboStartMonth.setEnabled(true);
                comboStartDay.setEnabled(true);
                comboStartYear.setEnabled(true);
                checkStart.setSelected(true);
            } else {
                comboStartMonth.setSelectedIndex(0);
                comboStartDay.setSelectedIndex(0);
                comboStartYear.setSelectedIndex(0);
                comboStartMonth.setEnabled(false);
                comboStartDay.setEnabled(false);
                comboStartYear.setEnabled(false);
                checkStart.setSelected(false);
            }

            comboEndMonth.setSelectedItem(endDate.getMonthValue());
            comboEndDay.setSelectedItem(endDate.getDayOfMonth());
            comboEndYear.setSelectedItem(endDate.getYear());

            enableEditing(true);
            validateForm();
        } else {
            currentEditPromo = null;
            enableEditing(false);
        }

    }

    private boolean validateForm() {
        boolean canUpdate = true;

        if (currentEditPromo != null) {
            constructedDiscount = new Discount(currentEditPromo);

            // Current Field data
            String curCodeName = fieldCodeName.getText();
            String curLevel = String.valueOf(comboLevel.getSelectedItem());
            String curType = String.valueOf(comboType.getSelectedItem());
            String curItemID = (((InventoryItem) comboTargetItem.getSelectedItem()).getInventoryID() >= 0) ? String.valueOf(((InventoryItem) comboTargetItem.getSelectedItem()).getInventoryID()) : null;
            Double curAmount = displayValue();
            String curDescription = fieldPromoDescription.getText();
            Date curStart = start;
            Date curExpiration = expiration;
            Boolean curAvailable = checkUnavailable.isSelected();

            constructedDiscount.setDiscountCode(curCodeName);
            constructedDiscount.setDiscountLevel(Integer.parseInt((String) comboLevel.getSelectedItem()));
            constructedDiscount.setDiscountType(Integer.parseInt((String) comboType.getSelectedItem()));
            constructedDiscount.setDescription(curDescription);
            constructedDiscount.setStartDate(curStart);
            constructedDiscount.setExpirationDate(curExpiration);
            constructedDiscount.setUnavailable(curAvailable);
            
            if (curLevel.equals("1") && curItemID != null) {
                constructedDiscount.setInventoryID(Integer.parseInt(curItemID));
            } else if (curLevel.equals("2")) {
                constructedDiscount.setInventoryID(null);
            } else {
                canUpdate = false;
            }

            if (curType.equals("1")) {
                constructedDiscount.setDiscountPercentage(curAmount);
                constructedDiscount.setDiscountDollarAmount(null);
            } else {
                constructedDiscount.setDiscountPercentage(null);
                constructedDiscount.setDiscountDollarAmount(curAmount);
            }

            // Current Object data
            String preCodeName = currentEditPromo.getDiscountCode();
            String preLevel = String.valueOf(currentEditPromo.getDiscountLevel());
            String preType = String.valueOf(currentEditPromo.getDiscountType());
            String preItemID = (currentEditPromo.getInventoryID() > 0) ? String.valueOf(currentEditPromo.getInventoryID()) : null;
            Double preAmount = (currentEditPromo.getDiscountType() == 1) ? currentEditPromo.getDiscountPercentage() : currentEditPromo.getDiscountDollarAmount();
            String preDescription = currentEditPromo.getDescription();
            Date preStart = (Date) currentEditPromo.getStartDate();
            Date preExpiration = (Date) currentEditPromo.getExpirationDate();
            Boolean preAvailable = currentEditPromo.getUnavailable();

            if (curCodeName.isEmpty() == false) {
                fieldCodeName.setBackground(new Color(70, 73, 75));
            } else {
                fieldCodeName.setBackground(UIManager.getDefaults().getColor("Actions.Red"));
                canUpdate = false;
            }

            if (curDescription.isEmpty() == false) {
                fieldPromoDescription.setBackground(new Color(70, 73, 75));
            } else {
                fieldPromoDescription.setBackground(UIManager.getDefaults().getColor("Actions.Red"));
                canUpdate = false;
            }

            if (curAmount != null) {
                fieldAmount.setBackground(new Color(70, 73, 75));
            } else {
                fieldAmount.setBackground(UIManager.getDefaults().getColor("Actions.Red"));
                canUpdate = false;
            }

            if (Objects.equals(curCodeName, preCodeName)
                    && Objects.equals(curLevel, preLevel)
                    && Objects.equals(curType, preType)
                    && Objects.equals(curItemID, preItemID)
                    && Objects.equals(curAmount, preAmount)
                    && Objects.equals(curDescription, preDescription)
                    && Objects.equals(curStart, preStart)
                    && Objects.equals(curExpiration, preExpiration)
                    && Objects.equals(curAvailable, preAvailable)) {

                canUpdate = false;
            }
        } else {

            canUpdate = false;
        }

        btnUpdate.setEnabled(canUpdate);

        return canUpdate;
    }

    private void updateDateDays(JComboBox comboMonthBox, JComboBox comboDayBox, JComboBox comboYearBox) {
        Calendar start = Calendar.getInstance();

        ArrayList<Integer> dayOne = new ArrayList();

        start.set(Calendar.YEAR, (int) comboYearBox.getSelectedItem() - 1);
        // start.set(Calendar.DAY_OF_MONTH, (int) comboDayBox.getSelectedItem());
        start.set(Calendar.MONTH, (int) comboMonthBox.getSelectedItem() - 1);

        int startDaysMax = start.getActualMaximum(Calendar.DAY_OF_MONTH);

        for (int i = 1; i <= startDaysMax; i++) {
            dayOne.add(i);
        }

        comboDayBox.setModel(new DefaultComboBoxModel(dayOne.toArray()));

        setSelectedDateRange();
    }

    private void setSelectedDateRange() {
        StringBuilder dateBuilder = new StringBuilder();
        DateTimeFormatter format = DateTimeFormatter.ofPattern("MMMM d, yyyy");

        LocalDate startDate = LocalDate.of((int) comboStartYear.getSelectedItem(), (int) comboStartMonth.getSelectedItem(), (int) comboStartDay.getSelectedItem());
        LocalDate endDate = LocalDate.of((int) comboEndYear.getSelectedItem(), (int) comboEndMonth.getSelectedItem(), (int) comboEndDay.getSelectedItem());

        boolean includeStart = checkStart.isSelected();

        if (endDate.isBefore(startDate) && includeStart) {
            comboEndMonth.setSelectedItem(comboStartMonth.getSelectedItem());
            comboEndDay.setSelectedItem(comboStartDay.getSelectedItem());
            comboEndYear.setSelectedItem(comboStartYear.getSelectedItem());
            endDate = startDate;
        }

        String startString = format.format(startDate);
        String endString = format.format(endDate);
        String borderTitle = "";

        if (includeStart) {
            borderTitle = "Starts on - Expires on";
            dateBuilder.append(startString).append(" - ").append(endString);
        } else {
            borderTitle = "Expires on";
            dateBuilder.append(endString);
        }

        fieldSelectedRange.setText(dateBuilder.toString());
        fieldSelectedRange.setBorder(javax.swing.BorderFactory.createTitledBorder(
                new javax.swing.border.LineBorder(
                        StateManager.COLOR_CYAN, 3, true),
                borderTitle, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12)));

        startDate = LocalDate.of((int) comboStartYear.getSelectedItem(), (int) comboStartMonth.getSelectedItem(), (int) comboStartDay.getSelectedItem());
        endDate = LocalDate.of((int) comboEndYear.getSelectedItem(), (int) comboEndMonth.getSelectedItem(), (int) comboEndDay.getSelectedItem());

        start = (includeStart) ? java.sql.Date.valueOf(startDate) : null;
        expiration = java.sql.Date.valueOf(endDate);

        validateForm();

        revalidate();
        repaint();
    }

    private void loadComboBoxes() {
        Thread loadComboBoxThread = new Thread(new Runnable() {
            @Override
            public void run() {
                items = DatabaseManager.getInventoryItems("", -1, 10000, "None", 0);

                items.add(0, new InventoryItem());
                comboTargetItem.setModel(new DefaultComboBoxModel(items.toArray()));

                populateTable();
            }
        });

        Thread loadDates = new Thread(() -> {
            Date minDate = DatabaseManager.getDiscountDate(false, DatabaseManager.DISCOUNT_START_DATE);
            Date maxDate = DatabaseManager.getDiscountDate(true, DatabaseManager.DISCOUNT_EXPIRATION_DATE);

            // get min and max date
            if (minDate != null && maxDate != null) {
                Calendar start = Calendar.getInstance();
                Calendar end = Calendar.getInstance();

                start.setTime(minDate);
                end.setTime(maxDate);

                int startDaysMax = start.getActualMaximum(Calendar.DAY_OF_MONTH);
                int endDaysMax = end.getActualMaximum(Calendar.DAY_OF_MONTH);
                int startYear = start.get(Calendar.YEAR);
                int endYear = end.get(Calendar.YEAR);

                ArrayList<Integer> monthOne = new ArrayList(), monthTwo = new ArrayList();
                ArrayList<Integer> dayOne = new ArrayList(), dayTwo = new ArrayList();
                ArrayList<Integer> yearOne = new ArrayList(), yearTwo = new ArrayList();

                // MONTHS
                for (int i = 1; i <= 12; i++) {
                    monthOne.add(i);
                    monthTwo.add(i);
                }

                // DAYS
                for (int i = 1; i <= startDaysMax; i++) {
                    dayOne.add(i);
                }
                for (int i = 1; i <= endDaysMax; i++) {
                    dayTwo.add(i);
                }

                // YEARS
                for (int i = startYear; i <= endYear + promoCodeYearLimitation; i++) {
                    yearOne.add(i);
                    yearTwo.add(i);
                }

                comboStartMonth.setModel(new DefaultComboBoxModel(monthOne.toArray()));
                comboStartDay.setModel(new DefaultComboBoxModel(dayOne.toArray()));
                comboStartYear.setModel(new DefaultComboBoxModel(yearOne.toArray()));

                comboEndMonth.setModel(new DefaultComboBoxModel(monthTwo.toArray()));
                comboEndDay.setModel(new DefaultComboBoxModel(dayTwo.toArray()));
                comboEndYear.setModel(new DefaultComboBoxModel(yearTwo.toArray()));

                comboStartMonth.setEnabled(true);
                comboStartDay.setEnabled(true);
                comboStartYear.setEnabled(true);

                comboEndMonth.setEnabled(true);
                comboEndDay.setEnabled(true);
                comboEndYear.setEnabled(true);

                setSelectedDateRange();

                revalidate();
                repaint();
            }
        });

        loadComboBoxThread.start();
        loadDates.start();
    }

    private Double displayValue() {
        Double doubleAmount = null;
        try {
            doubleAmount = Double.parseDouble(fieldAmount.getText());
            int type = Integer.parseInt((String) comboType.getSelectedItem());

            switch (type) {
                case 1:
                    Double asPercentage = Math.min(doubleAmount, 100) / 100;
                    doubleAmount = asPercentage;
                    labelAmount.setText(CartManager.doubleAsPercantage(asPercentage));
                    break;
                case 2:
                    labelAmount.setText(CartManager.doubleAsCurrency(doubleAmount));
                    break;
            }
        } catch (Exception ex) {
            labelAmount.setText("Not a valid amount");
        }
        return doubleAmount;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeletePromo;
    private javax.swing.JButton btnDeleteSelected;
    private javax.swing.JButton btnEditPromo;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox checkStart;
    private javax.swing.JCheckBox checkUnavailable;
    private javax.swing.JComboBox<String> comboEndDay;
    private javax.swing.JComboBox<String> comboEndMonth;
    private javax.swing.JComboBox<String> comboEndYear;
    private javax.swing.JComboBox<String> comboLevel;
    private javax.swing.JComboBox<String> comboStartDay;
    private javax.swing.JComboBox<String> comboStartMonth;
    private javax.swing.JComboBox<String> comboStartYear;
    private javax.swing.JComboBox<String> comboTargetItem;
    private javax.swing.JComboBox<String> comboType;
    private javax.swing.JTextField fieldAmount;
    private javax.swing.JTextField fieldCodeName;
    private javax.swing.JTextField fieldPromoDescription;
    private javax.swing.JTextField fieldSearch;
    private javax.swing.JTextField fieldSelectedRange;
    private javax.swing.JLabel labelAmount;
    private javax.swing.JLabel labelNotification;
    private javax.swing.JLabel labelSelectItem;
    private javax.swing.JPanel panelComboEnd;
    private javax.swing.JPanel panelComboStart;
    private javax.swing.JPanel panelControls;
    private javax.swing.JPanel panelEdit;
    private javax.swing.JPanel panelEditFields;
    private javax.swing.JPanel panelForm;
    private javax.swing.JPanel panelManageCenterScreen;
    private javax.swing.JPanel panelSelect;
    private javax.swing.JPanel panelSelectedDate;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JScrollPane scrollPromos;
    private javax.swing.JPanel sectionOnePanel;
    private javax.swing.JPanel sectionTwoPanel;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTable tablePromos;
    // End of variables declaration//GEN-END:variables
}
