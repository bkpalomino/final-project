package views.manager.inventory;

import com.mysql.cj.jdbc.Blob;
import entity.Category;
import entity.InventoryItem;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.io.File;
import java.nio.file.Files;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import util.DatabaseManager;
import util.ImageManager;
import util.StateManager;
import util.ValidationManager;

public class PanelInventoryManage extends javax.swing.JPanel {

    private StateManager panelState;

    private ArrayList<InventoryItem> itemSet;
    private int displayLimit = 500;
    private Category[] catsEdit;
    private ArrayList<Category> categories;
    private Blob fieldImage = null;
    private DefaultTableModel dtm;

    private InventoryItem currentSelectedItem;
    private InventoryItem currentEditItem;

    public PanelInventoryManage(StateManager panelState) {
        this.panelState = panelState;
        this.itemSet = new ArrayList<>();
        dtm = new DefaultTableModel(new String[]{"ID", "Item Name", "Retail Price", "Cost",
            "Quantity", "Restock Threshold", "Discontinued", "Category ID"}, 0);

        initComponents();
        loadComboBoxes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        labelSelectItem = new javax.swing.JLabel();
        btnDeleteSelected = new javax.swing.JButton();
        panelControls = new javax.swing.JPanel();
        comboCategories = new javax.swing.JComboBox<>();
        comboOther = new javax.swing.JComboBox<>();
        fieldSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        labelNotification = new javax.swing.JLabel();
        panelManageCenterScreen = new javax.swing.JPanel();
        scrollInventoryTable = new javax.swing.JScrollPane();
        tableInventory = new javax.swing.JTable();
        panelEdit = new javax.swing.JPanel();
        panelEditFields = new javax.swing.JPanel();
        labelItemImage = new javax.swing.JLabel();
        fieldItemID = new javax.swing.JTextField();
        fieldItemName = new javax.swing.JTextField();
        fieldRetailPrice = new javax.swing.JTextField();
        fieldCost = new javax.swing.JTextField();
        fieldQuantity = new javax.swing.JTextField();
        fieldRestockThreshold = new javax.swing.JTextField();
        scrollFieldDescription = new javax.swing.JScrollPane();
        fieldItemDescription = new javax.swing.JTextArea();
        comboCategoryID = new javax.swing.JComboBox<>();
        checkDiscontinued = new javax.swing.JCheckBox();
        btnUpdate = new javax.swing.JButton();
        btnChangeImage = new javax.swing.JButton();
        btnRedo = new javax.swing.JButton();
        btnDeleteItem = new javax.swing.JButton();
        btnEditItem = new javax.swing.JButton();

        labelSelectItem.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelSelectItem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSelectItem.setText("Select an Item to Edit");

        btnDeleteSelected.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        btnDeleteSelected.setText("Delete Selected");
        btnDeleteSelected.setEnabled(false);
        btnDeleteSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSelectedActionPerformed(evt);
            }
        });

        setLayout(new java.awt.BorderLayout());

        panelControls.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelControls.setLayout(new java.awt.GridBagLayout());

        comboCategories.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Category" }));
        comboCategories.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboCategoriesItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        panelControls.add(comboCategories, gridBagConstraints);

        comboOther.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        comboOther.setName(""); // NOI18N
        comboOther.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboOtherItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        panelControls.add(comboOther, gridBagConstraints);

        fieldSearch.setBackground(new java.awt.Color(60, 63, 65));
        fieldSearch.setToolTipText("");
        fieldSearch.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 153), 2, true), "Search Inventory Items", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        fieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldSearchKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 135;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 1, 3, 1);
        panelControls.add(fieldSearch, gridBagConstraints);

        btnSearch.setBackground(new java.awt.Color(0, 153, 153));
        btnSearch.setText("🔎");
        btnSearch.setName("Action"); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelControls.add(btnSearch, gridBagConstraints);

        labelNotification.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        labelNotification.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNotification.setText("Item Updated");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        panelControls.add(labelNotification, gridBagConstraints);
        labelNotification.setText(" ");

        add(panelControls, java.awt.BorderLayout.NORTH);

        panelManageCenterScreen.setLayout(new java.awt.GridBagLayout());

        scrollInventoryTable.setBorder(javax.swing.BorderFactory.createTitledBorder("Inventory"));

        tableInventory.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollInventoryTable.setViewportView(tableInventory);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelManageCenterScreen.add(scrollInventoryTable, gridBagConstraints);

        panelEdit.setBorder(javax.swing.BorderFactory.createTitledBorder("Edit Panel"));
        panelEdit.setLayout(new java.awt.BorderLayout());

        panelEditFields.setLayout(new java.awt.GridBagLayout());

        labelItemImage.setText("Image");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelEditFields.add(labelItemImage, gridBagConstraints);

        fieldItemID.setEditable(false);
        fieldItemID.setBorder(javax.swing.BorderFactory.createTitledBorder("Item ID"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelEditFields.add(fieldItemID, gridBagConstraints);

        fieldItemName.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelEditFields.add(fieldItemName, gridBagConstraints);
        fieldItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateEdits();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        fieldRetailPrice.setBorder(javax.swing.BorderFactory.createTitledBorder("Retail Price"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelEditFields.add(fieldRetailPrice, gridBagConstraints);
        fieldRetailPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateEdits();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        fieldCost.setBorder(javax.swing.BorderFactory.createTitledBorder("Cost"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelEditFields.add(fieldCost, gridBagConstraints);
        fieldCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateEdits();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        fieldQuantity.setBorder(javax.swing.BorderFactory.createTitledBorder("Quantity"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelEditFields.add(fieldQuantity, gridBagConstraints);
        fieldQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateEdits();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        fieldRestockThreshold.setBorder(javax.swing.BorderFactory.createTitledBorder("Restock Threshold"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelEditFields.add(fieldRestockThreshold, gridBagConstraints);
        fieldRestockThreshold.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateEdits();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        scrollFieldDescription.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Description"));

        fieldItemDescription.setColumns(20);
        fieldItemDescription.setLineWrap(true);
        fieldItemDescription.setRows(5);
        fieldItemDescription.setWrapStyleWord(true);
        scrollFieldDescription.setViewportView(fieldItemDescription);
        fieldItemDescription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateEdits();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelEditFields.add(scrollFieldDescription, gridBagConstraints);

        comboCategoryID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboCategoryID.setBorder(javax.swing.BorderFactory.createTitledBorder("Category"));
        comboCategoryID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboCategoryIDItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelEditFields.add(comboCategoryID, gridBagConstraints);

        checkDiscontinued.setText("Discontinued");
        checkDiscontinued.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDiscontinuedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelEditFields.add(checkDiscontinued, gridBagConstraints);

        btnUpdate.setBackground(new java.awt.Color(0, 153, 153));
        btnUpdate.setText("Update");
        btnUpdate.setName("Update"); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelEditFields.add(btnUpdate, gridBagConstraints);

        btnChangeImage.setBackground(new java.awt.Color(0, 153, 153));
        btnChangeImage.setText("️📝");
        btnChangeImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeImageActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 25);
        panelEditFields.add(btnChangeImage, gridBagConstraints);

        btnRedo.setBackground(new java.awt.Color(204, 102, 0));
        btnRedo.setText("Undo");
        btnRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRedoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelEditFields.add(btnRedo, gridBagConstraints);

        btnDeleteItem.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        btnDeleteItem.setText("Delete Item");
        btnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteItemActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelEditFields.add(btnDeleteItem, gridBagConstraints);

        panelEdit.add(panelEditFields, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelManageCenterScreen.add(panelEdit, gridBagConstraints);

        btnEditItem.setBackground(new java.awt.Color(0, 153, 153));
        btnEditItem.setText("Edit Item");
        btnEditItem.setEnabled(false);
        btnEditItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditItemActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelManageCenterScreen.add(btnEditItem, gridBagConstraints);

        add(panelManageCenterScreen, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void comboCategoriesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboCategoriesItemStateChanged
        // TODO add your handling code here:

        if (evt.getStateChange() == ItemEvent.SELECTED) {
            populateTable();
        }
    }//GEN-LAST:event_comboCategoriesItemStateChanged

    private void comboOtherItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboOtherItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            populateTable();
        }
    }//GEN-LAST:event_comboOtherItemStateChanged

    private void fieldSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldSearchKeyReleased
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_fieldSearchKeyReleased

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void comboCategoryIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboCategoryIDItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            int catID = ((Category) comboCategoryID.getSelectedItem()).getCategoryID();
            comboCategoryID.setBorder(javax.swing.BorderFactory.createTitledBorder("Category | ID: " + catID));
            validateEdits();
        }
    }//GEN-LAST:event_comboCategoryIDItemStateChanged

    private void checkDiscontinuedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkDiscontinuedActionPerformed
        // TODO add your handling code here:
        validateEdits();
    }//GEN-LAST:event_checkDiscontinuedActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        currentEditItem.setItemName(fieldItemName.getText());
        currentEditItem.setRetailPrice(Double.parseDouble(fieldRetailPrice.getText()));
        currentEditItem.setCost(Double.parseDouble(fieldCost.getText()));
        currentEditItem.setQuantity(Integer.parseInt(fieldQuantity.getText()));
        currentEditItem.setRestockThreshold(Integer.parseInt(fieldRestockThreshold.getText()));
        currentEditItem.setItemDescription(fieldItemDescription.getText());
        currentEditItem.setDiscontinued(checkDiscontinued.isSelected());
        int catID = ((Category) comboCategoryID.getSelectedItem()).getCategoryID();
        currentEditItem.setCategoryId(catID);
        if (fieldImage != null) {
            currentEditItem.setItemImage(fieldImage);
        }

        boolean result = DatabaseManager.save(currentEditItem);
        String notification = (result) ? currentEditItem.getItemName() + " Updated" : "Error, Please try again! ";

        labelNotification.setText(notification);
        if (result) {
            labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        } else {
            labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Yellow"));
        }

        btnUpdate.setEnabled(false);
        populateTable();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSelectedActionPerformed
        // TODO add your handling code here:
        boolean result = DatabaseManager.delete(currentSelectedItem);
        String notification = (result) ? currentSelectedItem.getItemName() + " Deleted" : "Error, Item not deleted!";

        labelNotification.setText(notification);
        if (result) {
            labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        } else {
            labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Yellow"));
        }

        if (currentSelectedItem.getInventoryID() == currentEditItem.getInventoryID()) {
            setEditItem(null);
        }

        btnDeleteSelected.setEnabled(false);
        btnEditItem.setEnabled(false);

        populateTable();
    }//GEN-LAST:event_btnDeleteSelectedActionPerformed

    private void btnChangeImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeImageActionPerformed
        // TODO add your handling code here:
        uploadImage();
    }//GEN-LAST:event_btnChangeImageActionPerformed

    private void btnRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRedoActionPerformed
        // TODO add your handling code here:
        labelItemImage.setIcon(currentEditItem.getImageIcon(ImageManager.SIZE_PREVIEW));
        fieldImage = null;
        validateEdits();
    }//GEN-LAST:event_btnRedoActionPerformed

    private void btnEditItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditItemActionPerformed
        // TODO add your handling code here:
        if (tableInventory.getSelectedRow() != -1) {
            panelEdit.removeAll();
            panelEdit.add(panelEditFields, BorderLayout.CENTER);
            setEditItem(currentSelectedItem);
            panelEdit.revalidate();
            panelEdit.repaint();
        }
    }//GEN-LAST:event_btnEditItemActionPerformed

    private void btnDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteItemActionPerformed
        // TODO add your handling code here:
        boolean result = DatabaseManager.delete(currentEditItem);
        String notification = (result) ? currentEditItem.getItemName() + " Deleted" : "Error, Item not deleted!";

        labelNotification.setText(notification);
        if (result) {
            labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        } else {
            labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Yellow"));
        }

        setEditItem(null);

        populateTable();
    }//GEN-LAST:event_btnDeleteItemActionPerformed

    // Methods
    private void enableEditing(boolean enabled) {
        for (Component c : panelEdit.getComponents()) {
            c.setEnabled(enabled);
        }
        btnUpdate.setEnabled(false);
    }

    public void populateTable() {
        String search = fieldSearch.getText();
        int categoryID = ((Category) comboCategories.getSelectedItem()).getCategoryID();
        String orderBy = (String) comboOther.getSelectedItem();

        tableInventory.setModel(dtm);

        if (currentEditItem == null) {
            panelEdit.removeAll();
            panelEdit.add(labelSelectItem, BorderLayout.CENTER);
            revalidate();
            repaint();
        }

        btnDeleteSelected.setEnabled(false);
        btnEditItem.setEnabled(false);

        SwingWorker<ArrayList<InventoryItem>, Void> worker = new SwingWorker<ArrayList<InventoryItem>, Void>() {
            @Override
            protected ArrayList<InventoryItem> doInBackground() throws Exception {
                ArrayList<InventoryItem> items = DatabaseManager.getInventoryItems(search, categoryID, displayLimit, orderBy, 0);
                return items;
            }

            @Override
            protected void done() {
                try {
                    itemSet = get();

                    scrollInventoryTable.setViewportView(tableInventory);

                    if (itemSet.size() > 0) {
                        String[] cols = new String[]{"ID", "Item Name", "Retail Price", "Cost",
                            "Quantity", "Restock Threshold", "Discontinued", "Category ID"};
                        Object[][] data = new Object[itemSet.size()][cols.length];

                        for (int i = 0; i < itemSet.size(); i++) {
                            InventoryItem curItem = itemSet.get(i);
                            data[i][0] = curItem.getInventoryID();
                            data[i][1] = curItem.getItemName();
                            data[i][2] = curItem.getRetailPrice();
                            data[i][3] = curItem.getCost();
                            data[i][4] = curItem.getQuantity();
                            data[i][5] = curItem.getRestockThreshold();
                            data[i][6] = curItem.isDiscontinued();
                            data[i][7] = curItem.getCategoryId();
                        }

                        DefaultTableModel activeTableModel = new DefaultTableModel(data, cols);

                        tableInventory.setModel(activeTableModel);

                        TableColumn column;
                        column = tableInventory.getColumnModel().getColumn(0);
                        column.setPreferredWidth(25);
                        TableColumn columnTwo;
                        columnTwo = tableInventory.getColumnModel().getColumn(1);
                        columnTwo.setPreferredWidth(tableInventory.getWidth());

                        tableInventory.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
                            @Override
                            public void valueChanged(ListSelectionEvent e) {
                                if (!e.getValueIsAdjusting()) {
                                    int selectedRow = tableInventory.getSelectedRow();

                                    if (selectedRow < tableInventory.getRowCount() && selectedRow != -1) {
                                        TableModel mod = tableInventory.getModel();
                                        for (InventoryItem i : itemSet) {
                                            if (i.getInventoryID() == (int) mod.getValueAt(selectedRow, 0)) {
                                                currentSelectedItem = i;

                                                btnDeleteSelected.setEnabled(true);
                                                btnEditItem.setEnabled(true);
                                                break;
                                            }
                                        }
                                    } else {
                                        if (currentEditItem == null) {
                                            panelEdit.removeAll();
                                            panelEdit.add(labelSelectItem, BorderLayout.CENTER);

                                        }
                                    }
                                }
                            }
                        });
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        };
        worker.execute();
    }

    private void setEditItem(InventoryItem item) {
        Category category = null;
        currentEditItem = currentSelectedItem;

        if (item != null) {
            fieldImage = null;
            for (Category cat : catsEdit) {
                if (cat.getCategoryID() == item.getCategoryId()) {
                    category = cat;
                    break;
                }
            }

            fieldItemID.setText(String.valueOf(item.getInventoryID()));
            fieldItemName.setText(item.getItemName());
            fieldRetailPrice.setText(String.valueOf(item.getRetailPrice()));
            fieldCost.setText(String.valueOf(item.getCost()));
            fieldQuantity.setText(String.valueOf(item.getQuantity()));
            fieldRestockThreshold.setText(String.valueOf(item.getRestockThreshold()));
            fieldItemDescription.setText(item.getItemDescription());
            comboCategoryID.setSelectedItem(category);
            checkDiscontinued.setSelected(item.isDiscontinued());
            labelItemImage.setIcon(item.getImageIcon(ImageManager.SIZE_PREVIEW));
            labelItemImage.setText(null);

            int catID = ((Category) comboCategoryID.getSelectedItem()).getCategoryID();
            comboCategoryID.setBorder(javax.swing.BorderFactory.createTitledBorder("Category | ID: " + catID));
            enableEditing(true);
        } else {
            fieldItemID.setText(null);
            fieldItemName.setText(null);
            fieldRetailPrice.setText(null);
            fieldCost.setText(null);
            fieldQuantity.setText(null);
            fieldRestockThreshold.setText(null);
            fieldItemDescription.setText(null);
            comboCategoryID.setSelectedItem(0);
            checkDiscontinued.setSelected(false);
            labelItemImage.setIcon(null);
            labelItemImage.setText(null);

            comboCategoryID.setBorder(javax.swing.BorderFactory.createTitledBorder("Category"));
            enableEditing(false);
            currentEditItem = null;
        }

    }

    private ArrayList<JTextField> getEditFields() {
        ArrayList<JTextField> fields = new ArrayList<>();

        fields.add(fieldItemName);
        fields.add(fieldRetailPrice);
        fields.add(fieldCost);
        fields.add(fieldQuantity);
        fields.add(fieldRestockThreshold);

        return fields;
    }

    private boolean validateEdits() {
        String name = fieldItemName.getText();
        String retailPrice = fieldRetailPrice.getText();
        String cost = fieldCost.getText();
        String quantity = fieldQuantity.getText();
        String restockThreshold = fieldRestockThreshold.getText();
        String description = fieldItemDescription.getText();

        ArrayList<Boolean> results = ValidationManager.validateItemEdits(name, retailPrice, cost, quantity, restockThreshold, description);
        ArrayList<JTextField> fields = getEditFields();
        boolean canUpdate = true;

        for (int i = 0; i < results.size(); i++) {
            if (i < results.size() - 1) {
                if (results.get(i)) {
                    fields.get(i).setBackground(new Color(70, 73, 75));
                } else {
                    fields.get(i).setBackground(UIManager.getDefaults().getColor("Actions.Red"));
                    canUpdate = false;
                }
            } else {
                if (results.get(i)) {
                    fieldItemDescription.setBackground(new Color(70, 73, 75));
                } else {
                    fieldItemDescription.setBackground(UIManager.getDefaults().getColor("Actions.Red"));
                    canUpdate = false;
                }
            }
        }

        if (fieldItemName.getText().equals(currentEditItem.getItemName())
                && fieldRetailPrice.getText().equals(String.valueOf(currentEditItem.getRetailPrice()))
                && fieldCost.getText().equals(String.valueOf(currentEditItem.getCost()))
                && fieldQuantity.getText().equals(String.valueOf(currentEditItem.getQuantity()))
                && fieldRestockThreshold.getText().equals(String.valueOf(currentEditItem.getRestockThreshold()))
                && fieldItemDescription.getText().equals(currentEditItem.getItemDescription())
                && ((Category) comboCategoryID.getSelectedItem()).getCategoryID() == currentEditItem.getCategoryId()
                && checkDiscontinued.isSelected() == currentEditItem.isDiscontinued()
                && fieldImage == null) {

            canUpdate = false;
        }

        btnUpdate.setEnabled(canUpdate);

        return canUpdate;
    }

    private void uploadImage() {
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG & PNG Images", "jpg", "png", "jpeg");

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                // Gather byte data from img file and put in imageIcon/Image
                File imgFile = fileChooser.getSelectedFile();
                byte[] b = Files.readAllBytes(imgFile.toPath());

                ImageIcon icon = ImageManager.getScaledImageIcon(b, ImageManager.SIZE_PREVIEW);

                // Prepare image panel and add image
                labelItemImage.setIcon(icon);

                // Save image to image field as a blob                              
                fieldImage = (Blob) DatabaseManager.getConnection().createBlob();
                fieldImage.setBytes(1, b);

                btnUpdate.setEnabled(true);

                revalidate();
                repaint();
            } catch (Exception ex) {
                System.out.println(ex);
            }

        }
    }

    private void loadComboBoxes() {
        Thread loadComboBoxThread = new Thread(new Runnable() {
            @Override
            public void run() {
                categories = DatabaseManager.getAllCategories();

                Category[] cats = new Category[categories.size() + 1];
                catsEdit = new Category[categories.size()];
                String[] others = new String[]{"None", "Highest Cost", "Lowest Cost"};

                comboCategories.removeAllItems();
                comboCategoryID.removeAllItems();

                for (int i = 0; i < categories.size() + 1; i++) {
                    if (i == 0) {
                        Category empty = new Category();
                        empty.setCategoryName("All");
                        empty.setCategoryID(-1);
                        cats[i] = empty;
                    } else {
                        cats[i] = categories.get(i - 1);
                    }
                    if (i < categories.size()) {
                        catsEdit[i] = categories.get(i);
                    }
                }

                comboCategories.setModel(new DefaultComboBoxModel(cats));
                comboCategoryID.setModel(new DefaultComboBoxModel(catsEdit));
                comboOther.setModel(new DefaultComboBoxModel(others));

                populateTable();
            }
        });

        loadComboBoxThread.start();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChangeImage;
    private javax.swing.JButton btnDeleteItem;
    private javax.swing.JButton btnDeleteSelected;
    private javax.swing.JButton btnEditItem;
    private javax.swing.JButton btnRedo;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox checkDiscontinued;
    private javax.swing.JComboBox<String> comboCategories;
    private javax.swing.JComboBox<String> comboCategoryID;
    private javax.swing.JComboBox<String> comboOther;
    private javax.swing.JTextField fieldCost;
    private javax.swing.JTextArea fieldItemDescription;
    private javax.swing.JTextField fieldItemID;
    private javax.swing.JTextField fieldItemName;
    private javax.swing.JTextField fieldQuantity;
    private javax.swing.JTextField fieldRestockThreshold;
    private javax.swing.JTextField fieldRetailPrice;
    private javax.swing.JTextField fieldSearch;
    private javax.swing.JLabel labelItemImage;
    private javax.swing.JLabel labelNotification;
    private javax.swing.JLabel labelSelectItem;
    private javax.swing.JPanel panelControls;
    private javax.swing.JPanel panelEdit;
    private javax.swing.JPanel panelEditFields;
    private javax.swing.JPanel panelManageCenterScreen;
    private javax.swing.JScrollPane scrollFieldDescription;
    private javax.swing.JScrollPane scrollInventoryTable;
    private javax.swing.JTable tableInventory;
    // End of variables declaration//GEN-END:variables
}
