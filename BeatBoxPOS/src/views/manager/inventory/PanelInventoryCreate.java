package views.manager.inventory;

import com.mysql.cj.jdbc.Blob;
import entity.Category;
import entity.InventoryItem;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.io.File;
import java.nio.file.Files;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import util.DatabaseManager;
import util.ImageManager;
import util.ValidationManager;

public class PanelInventoryCreate extends javax.swing.JPanel {

    private Category[] categoriesList;
    private ArrayList<Category> categories;

    private InventoryItem newItem;
    private Category newCategory;

    public PanelInventoryCreate() {
        this.newItem = new InventoryItem();
        this.newCategory = new Category();
        
        initComponents();
        loadComboBoxes();
        setup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelManageCategories1 = new javax.swing.JPanel();
        scrollCategories = new javax.swing.JScrollPane();
        listCategories = new javax.swing.JList<>();
        fieldCategoryID1 = new javax.swing.JTextField();
        fieldCategoryName1 = new javax.swing.JTextField();
        scrollFieldCatDescription1 = new javax.swing.JScrollPane();
        fieldItemCatDescription = new javax.swing.JTextArea();
        btnCreateCategory1 = new javax.swing.JButton();
        btnClearCategory1 = new javax.swing.JButton();
        btnEditCategory = new javax.swing.JButton();
        btnRemoveCategory = new javax.swing.JButton();
        panelManageCategories = new javax.swing.JPanel();
        fieldCategoryID = new javax.swing.JTextField();
        fieldCategoryName = new javax.swing.JTextField();
        scrollFieldCatDescription = new javax.swing.JScrollPane();
        fieldCategoryDescription = new javax.swing.JTextArea();
        btnCreateCategory = new javax.swing.JButton();
        btnClearCategory = new javax.swing.JButton();
        labelNotification = new javax.swing.JLabel();
        panelEditFields = new javax.swing.JPanel();
        labelItemImage = new javax.swing.JLabel();
        fieldItemID = new javax.swing.JTextField();
        fieldItemName = new javax.swing.JTextField();
        fieldRetailPrice = new javax.swing.JTextField();
        fieldCost = new javax.swing.JTextField();
        fieldQuantity = new javax.swing.JTextField();
        fieldRestockThreshold = new javax.swing.JTextField();
        scrollFieldDescription = new javax.swing.JScrollPane();
        fieldItemDescription = new javax.swing.JTextArea();
        comboCategoryID = new javax.swing.JComboBox<>();
        checkDiscontinued = new javax.swing.JCheckBox();
        btnCreate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnChangeImage = new javax.swing.JButton();
        btnClearImage = new javax.swing.JButton();

        panelManageCategories1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Create New Category", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        panelManageCategories1.setLayout(new java.awt.GridBagLayout());

        scrollCategories.setBorder(javax.swing.BorderFactory.createTitledBorder("All Categories"));

        listCategories.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        scrollCategories.setViewportView(listCategories);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        panelManageCategories1.add(scrollCategories, gridBagConstraints);

        fieldCategoryID1.setEditable(false);
        fieldCategoryID1.setText("Auto");
        fieldCategoryID1.setBorder(javax.swing.BorderFactory.createTitledBorder("CategoryID"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelManageCategories1.add(fieldCategoryID1, gridBagConstraints);

        fieldCategoryName1.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelManageCategories1.add(fieldCategoryName1, gridBagConstraints);
        fieldItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateEdits();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        scrollFieldCatDescription1.setBorder(javax.swing.BorderFactory.createTitledBorder("Category Description"));

        fieldItemCatDescription.setColumns(20);
        fieldItemCatDescription.setLineWrap(true);
        fieldItemCatDescription.setRows(5);
        fieldItemCatDescription.setWrapStyleWord(true);
        scrollFieldCatDescription1.setViewportView(fieldItemCatDescription);
        fieldItemDescription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateEdits();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 20, 5);
        panelManageCategories1.add(scrollFieldCatDescription1, gridBagConstraints);

        btnCreateCategory1.setBackground(new java.awt.Color(0, 153, 153));
        btnCreateCategory1.setText("Create");
        btnCreateCategory1.setEnabled(false);
        btnCreateCategory1.setName("Update"); // NOI18N
        btnCreateCategory1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCategory1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelManageCategories1.add(btnCreateCategory1, gridBagConstraints);

        btnClearCategory1.setBackground(new java.awt.Color(204, 102, 0));
        btnClearCategory1.setText("Clear");
        btnClearCategory1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearCategory1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelManageCategories1.add(btnClearCategory1, gridBagConstraints);

        btnEditCategory.setBackground(new java.awt.Color(0, 153, 153));
        btnEditCategory.setText("Edit");
        btnEditCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditCategoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 25);
        panelManageCategories1.add(btnEditCategory, gridBagConstraints);

        btnRemoveCategory.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        btnRemoveCategory.setText("Remove");
        btnRemoveCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveCategoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelManageCategories1.add(btnRemoveCategory, gridBagConstraints);

        panelManageCategories.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Create New Category", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        panelManageCategories.setLayout(new java.awt.GridBagLayout());

        fieldCategoryID.setEditable(false);
        fieldCategoryID.setText("Auto");
        fieldCategoryID.setBorder(javax.swing.BorderFactory.createTitledBorder("CategoryID"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelManageCategories.add(fieldCategoryID, gridBagConstraints);

        fieldCategoryName.setBorder(javax.swing.BorderFactory.createTitledBorder("Category Name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelManageCategories.add(fieldCategoryName, gridBagConstraints);
        fieldItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateCatEdits();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        scrollFieldCatDescription.setBorder(javax.swing.BorderFactory.createTitledBorder("Category Description"));

        fieldCategoryDescription.setColumns(20);
        fieldCategoryDescription.setLineWrap(true);
        fieldCategoryDescription.setRows(5);
        fieldCategoryDescription.setWrapStyleWord(true);
        scrollFieldCatDescription.setViewportView(fieldCategoryDescription);
        fieldItemDescription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateCatEdits();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelManageCategories.add(scrollFieldCatDescription, gridBagConstraints);

        btnCreateCategory.setBackground(new java.awt.Color(0, 153, 153));
        btnCreateCategory.setText("Create");
        btnCreateCategory.setEnabled(false);
        btnCreateCategory.setName("Update"); // NOI18N
        btnCreateCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCategoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelManageCategories.add(btnCreateCategory, gridBagConstraints);

        btnClearCategory.setBackground(new java.awt.Color(204, 102, 0));
        btnClearCategory.setText("Clear");
        btnClearCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearCategoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelManageCategories.add(btnClearCategory, gridBagConstraints);

        setLayout(new java.awt.GridBagLayout());

        labelNotification.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        labelNotification.setText("Your Item was successfully created!");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(labelNotification, gridBagConstraints);
        labelNotification.setText(" ");

        panelEditFields.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Create New Product", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        panelEditFields.setLayout(new java.awt.GridBagLayout());

        labelItemImage.setText("Image");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelEditFields.add(labelItemImage, gridBagConstraints);

        fieldItemID.setEditable(false);
        fieldItemID.setText("Auto");
        fieldItemID.setBorder(javax.swing.BorderFactory.createTitledBorder("Item ID"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelEditFields.add(fieldItemID, gridBagConstraints);

        fieldItemName.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelEditFields.add(fieldItemName, gridBagConstraints);
        fieldItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateEdits();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        fieldRetailPrice.setBorder(javax.swing.BorderFactory.createTitledBorder("Retail Price"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelEditFields.add(fieldRetailPrice, gridBagConstraints);
        fieldRetailPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateEdits();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        fieldCost.setBorder(javax.swing.BorderFactory.createTitledBorder("Cost"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelEditFields.add(fieldCost, gridBagConstraints);
        fieldCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateEdits();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        fieldQuantity.setBorder(javax.swing.BorderFactory.createTitledBorder("Quantity"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelEditFields.add(fieldQuantity, gridBagConstraints);
        fieldQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateEdits();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        fieldRestockThreshold.setBorder(javax.swing.BorderFactory.createTitledBorder("Restock Threshold"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelEditFields.add(fieldRestockThreshold, gridBagConstraints);
        fieldRestockThreshold.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateEdits();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        scrollFieldDescription.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Description"));

        fieldItemDescription.setColumns(20);
        fieldItemDescription.setLineWrap(true);
        fieldItemDescription.setRows(5);
        fieldItemDescription.setWrapStyleWord(true);
        scrollFieldDescription.setViewportView(fieldItemDescription);
        fieldItemDescription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateEdits();
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelEditFields.add(scrollFieldDescription, gridBagConstraints);

        comboCategoryID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboCategoryID.setBorder(javax.swing.BorderFactory.createTitledBorder("Category"));
        comboCategoryID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboCategoryIDItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelEditFields.add(comboCategoryID, gridBagConstraints);

        checkDiscontinued.setText("Discontinued");
        checkDiscontinued.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDiscontinuedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelEditFields.add(checkDiscontinued, gridBagConstraints);

        btnCreate.setBackground(new java.awt.Color(0, 153, 153));
        btnCreate.setText("Create");
        btnCreate.setEnabled(false);
        btnCreate.setName("Update"); // NOI18N
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelEditFields.add(btnCreate, gridBagConstraints);

        btnClear.setBackground(new java.awt.Color(204, 102, 0));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelEditFields.add(btnClear, gridBagConstraints);

        btnChangeImage.setBackground(new java.awt.Color(0, 153, 153));
        btnChangeImage.setText("️📝");
        btnChangeImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeImageActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 25);
        panelEditFields.add(btnChangeImage, gridBagConstraints);

        btnClearImage.setBackground(new java.awt.Color(204, 102, 0));
        btnClearImage.setText("Clear");
        btnClearImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearImageActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 5);
        panelEditFields.add(btnClearImage, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(panelEditFields, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void comboCategoryIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboCategoryIDItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            int catID = ((Category) comboCategoryID.getSelectedItem()).getCategoryID();
            comboCategoryID.setBorder(javax.swing.BorderFactory.createTitledBorder("Category | ID: " + catID));
            newItem.setCategoryId(catID);
            validateEdits();
        }
    }//GEN-LAST:event_comboCategoryIDItemStateChanged

    private void checkDiscontinuedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkDiscontinuedActionPerformed
        // TODO add your handling code here:
        validateEdits();
    }//GEN-LAST:event_checkDiscontinuedActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        newItem.setInventoryID(0);
        newItem.setItemName(fieldItemName.getText());
        newItem.setRetailPrice(Double.parseDouble(fieldRetailPrice.getText()));
        newItem.setCost(Double.parseDouble(fieldCost.getText()));
        newItem.setQuantity(Integer.parseInt(fieldQuantity.getText()));
        newItem.setRestockThreshold(Integer.parseInt(fieldRestockThreshold.getText()));
        newItem.setItemDescription(fieldItemDescription.getText());
        newItem.setDiscontinued(checkDiscontinued.isSelected());

        boolean result = DatabaseManager.save(newItem);
        String notification = (result) ? "Your item was successfully created!" : "Error, item was not created!";

        labelNotification.setText(notification);
        if (result) {
            labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        } else {
            labelNotification.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        }

        btnCreate.setEnabled(false);
        btnClear.doClick();
        btnClearImage.doClick();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        for (JTextField field : getEditFields()) {
            field.setText(null);
        }
        fieldItemDescription.setText(null);
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnChangeImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeImageActionPerformed
        // TODO add your handling code here:
        uploadImage();
    }//GEN-LAST:event_btnChangeImageActionPerformed

    private void btnClearImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearImageActionPerformed
        // TODO add your handling code here:
        newItem.setItemImage(null);
        ImageIcon icon = newItem.getImageIcon(ImageManager.SIZE_PREVIEW);

        labelItemImage.setIcon(icon);
    }//GEN-LAST:event_btnClearImageActionPerformed

    private void btnCreateCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCategoryActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_btnCreateCategoryActionPerformed

    private void btnClearCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearCategoryActionPerformed
        // TODO add your handling code here:
        fieldCategoryName.setText(null);
        fieldCategoryDescription.setText(null);
        btnCreateCategory.setEnabled(false);
    }//GEN-LAST:event_btnClearCategoryActionPerformed

    private void btnCreateCategory1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCategory1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCreateCategory1ActionPerformed

    private void btnClearCategory1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearCategory1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnClearCategory1ActionPerformed

    private void btnEditCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditCategoryActionPerformed

    private void btnRemoveCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRemoveCategoryActionPerformed

    // Methods
    private void setup() {
        labelItemImage.setIcon(newItem.getImageIcon(ImageManager.SIZE_PREVIEW));
        labelItemImage.setText(null);
    }

    private ArrayList<JTextField> getEditFields() {
        ArrayList<JTextField> fields = new ArrayList<>();

        fields.add(fieldItemName);
        fields.add(fieldRetailPrice);
        fields.add(fieldCost);
        fields.add(fieldQuantity);
        fields.add(fieldRestockThreshold);

        return fields;
    }

    private boolean validateEdits() {
        String name = fieldItemName.getText();
        String retailPrice = fieldRetailPrice.getText();
        String cost = fieldCost.getText();
        String quantity = fieldQuantity.getText();
        String restockThreshold = fieldRestockThreshold.getText();
        String description = fieldItemDescription.getText();

        ArrayList<Boolean> results = ValidationManager.validateItemEdits(name, retailPrice, cost, quantity, restockThreshold, description);
        ArrayList<JTextField> fields = getEditFields();
        boolean canCreate = true;

        for (int i = 0; i < results.size(); i++) {
            if (i < results.size() - 1) {
                if (results.get(i)) {
                    fields.get(i).setBackground(new Color(70, 73, 75));
                } else {
                    fields.get(i).setBackground(UIManager.getDefaults().getColor("Actions.Red"));
                    canCreate = false;
                }
            } else {
                if (results.get(i)) {
                    fieldItemDescription.setBackground(new Color(70, 73, 75));
                } else {
                    fieldItemDescription.setBackground(UIManager.getDefaults().getColor("Actions.Red"));
                    canCreate = false;
                }
            }
        }

        if (newItem.getCategoryId() == 0) {
            int catID = ((Category) comboCategoryID.getSelectedItem()).getCategoryID();
            newItem.setCategoryId(catID);
        }

        btnCreate.setEnabled(canCreate);

        labelNotification.setText(" ");

        return canCreate;
    }

    private boolean validateCatEdits() {
        boolean canCreate = true;
        
        if (!fieldCategoryName.getText().isEmpty()) {
            fieldCategoryName.setBackground(new Color(70, 73, 75));
        } else {
            fieldCategoryName.setBackground(UIManager.getDefaults().getColor("Actions.Red"));
            canCreate = false;
        }
        
        if (!fieldCategoryDescription.getText().isEmpty()) {
            fieldCategoryDescription.setBackground(new Color(70, 73, 75));
        } else {
            fieldCategoryDescription.setBackground(UIManager.getDefaults().getColor("Actions.Red"));
            canCreate = false;
        }
        
        btnCreateCategory.setEnabled(canCreate);
        
        return canCreate;
    }

    private void uploadImage() {
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG & PNG Images", "jpg", "png", "jpeg");

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                // Gather byte data from img file and put in imageIcon/Image
                File imgFile = fileChooser.getSelectedFile();
                byte[] b = Files.readAllBytes(imgFile.toPath());

                // Save image to image field as a blob                              
                Blob fieldImage = (Blob) DatabaseManager.getConnection().createBlob();
                fieldImage.setBytes(1, b);

                newItem.setItemImage(fieldImage);

                // Prepare image panel and add image
                labelItemImage.setIcon(newItem.getImageIcon(ImageManager.SIZE_PREVIEW));

                btnCreate.setEnabled(true);

                revalidate();
                repaint();
            } catch (Exception ex) {
                System.out.println(ex);
            }
        }
    }

    private void loadComboBoxes() {
        Thread loadComboBoxThread = new Thread(new Runnable() {
            @Override
            public void run() {
                categories = DatabaseManager.getAllCategories();

                categoriesList = new Category[categories.size()];

                comboCategoryID.removeAllItems();

                for (int i = 0; i < categories.size(); i++) {
                    categoriesList[i] = categories.get(i);
                }
                comboCategoryID.setModel(new DefaultComboBoxModel(categoriesList));
            }
        });

        loadComboBoxThread.start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChangeImage;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClearCategory;
    private javax.swing.JButton btnClearCategory1;
    private javax.swing.JButton btnClearImage;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnCreateCategory;
    private javax.swing.JButton btnCreateCategory1;
    private javax.swing.JButton btnEditCategory;
    private javax.swing.JButton btnRemoveCategory;
    private javax.swing.JCheckBox checkDiscontinued;
    private javax.swing.JComboBox<String> comboCategoryID;
    private javax.swing.JTextArea fieldCategoryDescription;
    private javax.swing.JTextField fieldCategoryID;
    private javax.swing.JTextField fieldCategoryID1;
    private javax.swing.JTextField fieldCategoryName;
    private javax.swing.JTextField fieldCategoryName1;
    private javax.swing.JTextField fieldCost;
    private javax.swing.JTextArea fieldItemCatDescription;
    private javax.swing.JTextArea fieldItemDescription;
    private javax.swing.JTextField fieldItemID;
    private javax.swing.JTextField fieldItemName;
    private javax.swing.JTextField fieldQuantity;
    private javax.swing.JTextField fieldRestockThreshold;
    private javax.swing.JTextField fieldRetailPrice;
    private javax.swing.JLabel labelItemImage;
    private javax.swing.JLabel labelNotification;
    private javax.swing.JList<String> listCategories;
    private javax.swing.JPanel panelEditFields;
    private javax.swing.JPanel panelManageCategories;
    private javax.swing.JPanel panelManageCategories1;
    private javax.swing.JScrollPane scrollCategories;
    private javax.swing.JScrollPane scrollFieldCatDescription;
    private javax.swing.JScrollPane scrollFieldCatDescription1;
    private javax.swing.JScrollPane scrollFieldDescription;
    // End of variables declaration//GEN-END:variables
}
