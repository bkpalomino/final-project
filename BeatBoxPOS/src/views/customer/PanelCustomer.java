package views.customer;

import entity.Category;
import entity.InventoryItem;
import entity.Person;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import util.CartManager;
import util.DatabaseManager;
import util.ImageManager;
import util.ResourceLoader;
import util.StateManager;

/*
Author: Braeden Palomino
Date: 11/14/24
Description: GUI panel for the customer page. Handles most user actions and events pertaining to browsing and cart actions.
 */
public class PanelCustomer extends javax.swing.JPanel {

    private StateManager panelState;
    private CartManager cartManager;

    private Person user;

    private PanelProductDetails panelProductPage;
    private PanelCheckout panelCheckout;

    private int displayLimit = 9;
    private ImageIcon cartIcon;

    public PanelCustomer(StateManager panelState) {
        initComponents();

        this.panelState = panelState;
        this.cartManager = new CartManager(this);
        cartIcon = ResourceLoader.getResourceIcon("icons/shopping-cart.png", ImageManager.SIZE_ICON);

        setPrivileges();

        addFocusListeners();

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                scrollProducts.requestFocus();
            }
        });

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        labelLoading = new javax.swing.JLabel();
        panelNotification = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        scrollNotification = new javax.swing.JScrollPane();
        textAreaNotification = new javax.swing.JTextArea();
        btnNotOkay = new javax.swing.JButton();
        panelCartInner = new javax.swing.JPanel();
        labelChooseCustomer = new javax.swing.JLabel();
        panelControls = new javax.swing.JPanel();
        btnAccount = new javax.swing.JButton();
        toggleCart = new javax.swing.JToggleButton();
        panelOptions = new javax.swing.JPanel();
        comboCategories = new javax.swing.JComboBox<>();
        comboOther = new javax.swing.JComboBox<>();
        fieldSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        comboCustomers = new javax.swing.JComboBox<>();
        panelCenterScreen = new javax.swing.JPanel();
        splitPane = new javax.swing.JSplitPane();
        panelBrowsing = new javax.swing.JPanel();
        panelBrowsingInner = new javax.swing.JPanel();
        scrollProducts = new javax.swing.JScrollPane();
        panelScrollProducts = new javax.swing.JPanel();
        panelLimitBtns = new javax.swing.JPanel();
        btn = new javax.swing.JButton();
        panelCart = new javax.swing.JPanel();
        scrollCart = new javax.swing.JScrollPane();
        labelShop = new javax.swing.JLabel();
        labelEstimatedSub = new javax.swing.JLabel();
        btnCheckout = new javax.swing.JButton();
        btnClearCart = new javax.swing.JButton();
        toggleExpandCart = new javax.swing.JToggleButton();

        labelLoading.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelLoading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelLoading.setText("Loading...");
        labelLoading.setToolTipText("");

        panelNotification.setLayout(new java.awt.GridBagLayout());

        labelTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        labelTitle.setText("Order Placed!");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(17, 17, 17, 17);
        panelNotification.add(labelTitle, gridBagConstraints);

        scrollNotification.setFocusable(false);
        scrollNotification.setOpaque(false);

        textAreaNotification.setEditable(false);
        textAreaNotification.setColumns(1);
        textAreaNotification.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        textAreaNotification.setLineWrap(true);
        textAreaNotification.setRows(5);
        textAreaNotification.setText("Your order has been placed and is being processed! \n\nA receipt for the order can be found in your computers documents folder. The path to this folder should be \"C:\\Users\\(Your Username)\\Documents\\BeatBOX_Receipts\".\n\nThanks for shopping with us!");
        textAreaNotification.setWrapStyleWord(true);
        textAreaNotification.setOpaque(false);
        scrollNotification.setViewportView(textAreaNotification);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelNotification.add(scrollNotification, gridBagConstraints);

        btnNotOkay.setBackground(new java.awt.Color(0, 153, 153));
        btnNotOkay.setText("Okay");
        btnNotOkay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNotOkayActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 46;
        gridBagConstraints.ipady = 21;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panelNotification.add(btnNotOkay, gridBagConstraints);

        panelCartInner.setLayout(new javax.swing.BoxLayout(panelCartInner, javax.swing.BoxLayout.Y_AXIS));

        panelCartInner.setAlignmentX(Component.LEFT_ALIGNMENT);
        panelCartInner.setAlignmentY(Component.TOP_ALIGNMENT);

        labelChooseCustomer.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelChooseCustomer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelChooseCustomer.setText("Select a Customer from the combobox to get started.");
        labelChooseCustomer.setToolTipText("");

        setName("Customer"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        panelControls.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelControls.setLayout(new java.awt.GridBagLayout());

        btnAccount.setBackground(new java.awt.Color(204, 102, 0));
        btnAccount.setForeground(new java.awt.Color(255, 255, 255));
        btnAccount.setText("ðŸ¤µ");
        btnAccount.setName("Special"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelControls.add(btnAccount, gridBagConstraints);

        toggleCart.setBackground(new java.awt.Color(204, 102, 0));
        toggleCart.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        toggleCart.setForeground(new java.awt.Color(255, 255, 255));
        toggleCart.setText("Cart");
        toggleCart.setName("Special"); // NOI18N
        toggleCart.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                toggleCartFocusGained(evt);
            }
        });
        toggleCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleCartActionPerformed(evt);
            }
        });
        toggleCart.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                toggleCartKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelControls.add(toggleCart, gridBagConstraints);

        panelOptions.setLayout(new java.awt.GridBagLayout());

        comboCategories.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Category" }));
        comboCategories.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboCategoriesItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        panelOptions.add(comboCategories, gridBagConstraints);

        comboOther.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        comboOther.setName(""); // NOI18N
        comboOther.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboOtherItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        panelOptions.add(comboOther, gridBagConstraints);

        fieldSearch.setToolTipText("");
        fieldSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153), 2));
        fieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldSearchKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 135;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(3, 1, 3, 1);
        panelOptions.add(fieldSearch, gridBagConstraints);

        btnSearch.setBackground(new java.awt.Color(0, 153, 153));
        btnSearch.setText("ðŸ”Ž");
        btnSearch.setName("Action"); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelOptions.add(btnSearch, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        panelControls.add(panelOptions, gridBagConstraints);

        btnBack.setBackground(new java.awt.Color(0, 153, 153));
        btnBack.setText("Back");
        btnBack.setName("Action"); // NOI18N
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelControls.add(btnBack, gridBagConstraints);
        btnBack.setVisible(false);

        comboCustomers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading Customers..." }));
        comboCustomers.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 102, 0), 3, true));
        comboCustomers.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboCustomersItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelControls.add(comboCustomers, gridBagConstraints);

        add(panelControls, java.awt.BorderLayout.NORTH);

        panelCenterScreen.setLayout(new java.awt.BorderLayout());

        splitPane.setDividerLocation(300);

        panelBrowsing.setLayout(new java.awt.BorderLayout());

        panelBrowsingInner.setLayout(new java.awt.GridBagLayout());

        scrollProducts.setAutoscrolls(true);

        panelScrollProducts.setBackground(new java.awt.Color(51, 51, 51));
        panelScrollProducts.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelScrollProducts.setLayout(new java.awt.GridLayout(3, 3, 10, 10));
        scrollProducts.setViewportView(panelScrollProducts);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.7;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBrowsingInner.add(scrollProducts, gridBagConstraints);
        scrollProducts.getVerticalScrollBar().setUnitIncrement(10);

        btn.setBackground(new java.awt.Color(0, 153, 153));
        btn.setText("limit btn");
        btn.setName("Action"); // NOI18N
        panelLimitBtns.add(btn);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        panelBrowsingInner.add(panelLimitBtns, gridBagConstraints);

        panelBrowsing.add(panelBrowsingInner, java.awt.BorderLayout.CENTER);

        splitPane.setLeftComponent(panelBrowsing);

        panelCart.setLayout(new java.awt.GridBagLayout());

        scrollCart.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cart", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        scrollCart.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        labelShop.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelShop.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelShop.setText("Add some items to your cart!");
        labelShop.setToolTipText("");
        scrollCart.setViewportView(labelShop);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelCart.add(scrollCart, gridBagConstraints);
        scrollCart.getVerticalScrollBar().setUnitIncrement(10);

        labelEstimatedSub.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelEstimatedSub.setText("Estimated Subtotal: $0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        panelCart.add(labelEstimatedSub, gridBagConstraints);

        btnCheckout.setBackground(new java.awt.Color(0, 153, 153));
        btnCheckout.setText("Checkout");
        btnCheckout.setEnabled(false);
        btnCheckout.setName("Action"); // NOI18N
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelCart.add(btnCheckout, gridBagConstraints);

        btnClearCart.setBackground(new java.awt.Color(204, 102, 0));
        btnClearCart.setText("Clear Cart");
        btnClearCart.setName("Special"); // NOI18N
        btnClearCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearCartActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelCart.add(btnClearCart, gridBagConstraints);

        toggleExpandCart.setBackground(new java.awt.Color(204, 102, 0));
        toggleExpandCart.setText("Expand Cart");
        toggleExpandCart.setName("Special"); // NOI18N
        toggleExpandCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleExpandCartActionPerformed(evt);
            }
        });
        toggleExpandCart.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                toggleExpandCartKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelCart.add(toggleExpandCart, gridBagConstraints);

        splitPane.setRightComponent(panelCart);
        panelCart.setVisible(false);

        panelCenterScreen.add(splitPane, java.awt.BorderLayout.CENTER);

        add(panelCenterScreen, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnNotOkayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNotOkayActionPerformed
        // TODO add your handling code here:
        showMain();
    }//GEN-LAST:event_btnNotOkayActionPerformed

    private void toggleCartFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_toggleCartFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_toggleCartFocusGained

    private void toggleCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleCartActionPerformed
        // TODO add your handling code here:
        if (toggleCart.isSelected()) {
            panelCart.setVisible(true);
        } else {
            panelCart.setVisible(false);
            panelBrowsing.setVisible(true);
            toggleExpandCart.setText("Expand Cart");
            toggleExpandCart.setSelected(false);
        }

        splitPane.setDividerLocation(splitPane.getMaximumDividerLocation() - 100);

        revalidate();
        repaint();
    }//GEN-LAST:event_toggleCartActionPerformed

    private void toggleCartKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_toggleCartKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            toggleCart.doClick();

        }
    }//GEN-LAST:event_toggleCartKeyPressed

    private void comboCategoriesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboCategoriesItemStateChanged
        // TODO add your handling code here:

        if (evt.getStateChange() == ItemEvent.SELECTED) {
            Category cat = (Category) comboCategories.getSelectedItem();
            String orderBy = (String) comboOther.getSelectedItem();

            loadProducts(fieldSearch.getText(), cat.getCategoryID(), displayLimit, orderBy, 0);
        }
    }//GEN-LAST:event_comboCategoriesItemStateChanged

    private void comboOtherItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboOtherItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            Category cat = (Category) comboCategories.getSelectedItem();
            String orderBy = (String) comboOther.getSelectedItem();

            loadProducts(fieldSearch.getText(), cat.getCategoryID(), displayLimit, orderBy, 0);
        }
    }//GEN-LAST:event_comboOtherItemStateChanged

    private void fieldSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldSearchKeyReleased
        // TODO add your handling code here:    
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            btnSearch.doClick();
        }
    }//GEN-LAST:event_fieldSearchKeyReleased

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        Category cat = (Category) comboCategories.getSelectedItem();
        String orderBy = (String) comboOther.getSelectedItem();

        loadProducts(fieldSearch.getText(), cat.getCategoryID(), displayLimit, orderBy, 0);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        btnBack.setVisible(false);
        showMain();
    }//GEN-LAST:event_btnBackActionPerformed

    private void comboCustomersItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboCustomersItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            boolean loadPage = (user == null) ? true : false;
            Person person = (Person) comboCustomers.getSelectedItem();

            user = (person.getPersonID() != -1) ? person : null;

            if (user != null) {
                ImageIcon personIcon = user.getImageIcon(ImageManager.SIZE_ICON);

                toggleCart.setEnabled(true);
                btnAccount.setEnabled(true);
                btnAccount.setText(user.getNameFirst());
                btnAccount.setIcon(personIcon);

                if (loadPage) {
                    reloadPage();
                }
                comboCustomers.setBorder(new javax.swing.border.LineBorder(StateManager.COLOR_CYAN, 3, true));
            } else {
                panelCenterScreen.removeAll();
                panelCenterScreen.add(labelChooseCustomer, BorderLayout.CENTER);

                btnAccount.setText("ðŸ¤µ");
                btnAccount.setIcon(null);

                btnAccount.setEnabled(false);
                panelOptions.setVisible(false);
                btnBack.setVisible(false);
                toggleCart.setEnabled(false);
                comboCustomers.setBorder(new javax.swing.border.LineBorder(StateManager.COLOR_ORANGE, 3, true));
            }
            revalidate();
            repaint();
        }
    }//GEN-LAST:event_comboCustomersItemStateChanged

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
        showCheckout();
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void btnClearCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearCartActionPerformed
        // TODO add your handling code here:
        cartManager.removeAllItems();
        loadCart();
    }//GEN-LAST:event_btnClearCartActionPerformed

    private void toggleExpandCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleExpandCartActionPerformed
        // TODO add your handling code here:
        if (toggleExpandCart.isSelected()) {
            panelBrowsing.setVisible(false);
            toggleExpandCart.setText("Minimize Cart");
        } else {
            panelBrowsing.setVisible(true);
            toggleExpandCart.setText("Expand Cart");
            splitPane.setDividerLocation(splitPane.getMaximumDividerLocation() - 100);
        }

        revalidate();
        repaint();
    }//GEN-LAST:event_toggleExpandCartActionPerformed

    private void toggleExpandCartKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_toggleExpandCartKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            toggleExpandCart.doClick();
        }
    }//GEN-LAST:event_toggleExpandCartKeyPressed

    // -------------
    // Other methods
    // -------------
    private void setPrivileges() {
        toggleCart.setIcon(cartIcon);
        String currentState = (StateManager.getCurrentUser() != null) ? StateManager.getCurrentUser().getLogon().getPositionTitle() : "";
        if (currentState.equals("Customer")) {
            user = StateManager.getCurrentUser();
            ImageIcon personIcon = user.getImageIcon(ImageManager.SIZE_ICON);

            toggleCart.setText("0");
            toggleCart.setIconTextGap(5);

            btnAccount.setText(user.getNameFirst());
            btnAccount.setIconTextGap(5);
            btnAccount.setIcon(personIcon);

            comboCustomers.setVisible(false);
            reloadPage();
        } else if (currentState.equals("Employee") || currentState.equals("Manager")) {
            user = null;

            panelCenterScreen.removeAll();
            panelCenterScreen.add(labelChooseCustomer, BorderLayout.CENTER);

            Thread loadCustomers = new Thread(() -> {
                ArrayList<Person> customers = DatabaseManager.getCustomersWithTitle("Customer");

                System.out.println("Loading Customers...");

                Person empty = new Person(-1);
                customers.add(0, empty);

                comboCustomers.setModel(new DefaultComboBoxModel(customers.toArray()));
            });

            loadCustomers.start();

            btnAccount.setEnabled(false);
            panelOptions.setVisible(false);
            toggleCart.setEnabled(false);
        } else {
            btnAccount.setText("Sign In");

            toggleCart.setVisible(false);
            comboCustomers.setVisible(false);
            reloadPage();
        }

    }

    public void reloadPage() {
        panelCenterScreen.removeAll();
        panelCenterScreen.add(splitPane);

        splitPane.setVisible(true);
        panelOptions.setVisible(true);
        btnBack.setVisible(false);

        loadProducts("", -1, displayLimit, "None", 0);
        loadComboBoxes();

        revalidate();
        repaint();

    }

    private void loadProducts(String search, int categoryID, int limit, String orderBy, int offset) {
        PanelCustomer pc = this;

        FocusListener focusListener = new FocusListener() {
            Color originalButtonColor;
            Color originalFontColor;

            @Override
            public void focusGained(FocusEvent e) {
                originalButtonColor = e.getComponent().getBackground();
                originalFontColor = e.getComponent().getForeground();

                e.getComponent().setBackground(originalButtonColor.brighter());
                e.getComponent().setForeground(originalFontColor.brighter());
            }

            @Override
            public void focusLost(FocusEvent e) {
                e.getComponent().setBackground(originalButtonColor);
                e.getComponent().setForeground(originalFontColor);
            }
        };

        Thread loadProductsThread = new Thread(new Runnable() {
            @Override
            public void run() {
                ArrayList<InventoryItem> items = DatabaseManager.getInventoryItems(search, categoryID, limit + 1, orderBy, offset);

                panelScrollProducts.removeAll();
                panelLimitBtns.removeAll();

                int loopLimiter = (items.size() < limit) ? items.size() : limit;

                for (int i = 0; i < loopLimiter; i++) {
                    InventoryItem item = items.get(i);
                    PanelProductCard card = new PanelProductCard(pc, item);
                    card.setName(String.valueOf(i));

                    panelScrollProducts.add(card);
                }

                if (offset != 0) {
                    JButton btnPreviousPage = new JButton("< Previous Page");

                    btnPreviousPage.setBackground(new java.awt.Color(0, 153, 153));

                    btnPreviousPage.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            panelScrollProducts.removeAll();
                            scrollProducts.getVerticalScrollBar().setValue(0);
                            loadProducts(search, categoryID, limit, orderBy, offset - limit);
                        }
                    });
                    btnPreviousPage.addFocusListener(focusListener);
                    panelLimitBtns.add(btnPreviousPage);
                }

                if (items.size() > limit) {
                    JButton btnNextPage = new JButton("Next Page >");

                    btnNextPage.setBackground(new java.awt.Color(0, 153, 153));

                    btnNextPage.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            panelScrollProducts.removeAll();
                            scrollProducts.getVerticalScrollBar().setValue(0);
                            loadProducts(search, categoryID, limit, orderBy, offset + limit);
                        }
                    });
                    btnNextPage.addFocusListener(focusListener);
                    panelLimitBtns.add(btnNextPage);
                }

                panelScrollProducts.revalidate();
                panelScrollProducts.repaint();
                panelLimitBtns.revalidate();
                panelLimitBtns.repaint();
            }
        });

        loadProductsThread.start();

    }

    private void loadComboBoxes() {
        Thread loadComboBoxThread = new Thread(new Runnable() {
            @Override
            public void run() {
                ArrayList<Category> categories = DatabaseManager.getAllCategories();

                Category[] cats = new Category[categories.size() + 1];
                String[] others = new String[]{"None", "Highest Cost", "Lowest Cost"};

                comboCategories.removeAllItems();

                for (int i = 0; i < categories.size() + 1; i++) {
                    if (i == 0) {
                        Category empty = new Category();
                        empty.setCategoryName("All");
                        empty.setCategoryID(-1);
                        cats[i] = empty;
                    } else {
                        cats[i] = categories.get(i - 1);
                    }
                }

                comboCategories.setModel(new DefaultComboBoxModel(cats));
                comboOther.setModel(new DefaultComboBoxModel(others));
            }
        });

        loadComboBoxThread.start();
    }

    public void loadCart() {
        labelLoading.setVisible(true);
        scrollCart.setViewportView(labelLoading);

        panelCartInner.removeAll();
        cartManager.validateCart();

        PanelCustomer panel = this;

        Thread loadCart = new Thread(new Runnable() {
            @Override
            public void run() {

            }
        }, "loadCart");
        int cartAmt = cartManager.getCartCount();
        if (cartAmt > 0) {
            int index = 1;
            for (PanelProductCard card : cartManager.getCartAsPanelCards(panel)) {
                card.setPreferredSize(new Dimension(scrollCart.getPreferredSize().width, (int) ((int) (card.getPreferredSize().height) / 1.5)));
                card.setName(String.valueOf(index));
                panelCartInner.add(card);
                index++;
            }
            labelEstimatedSub.setText("Estimated Subtotal: " + CartManager.doubleAsCurrency(cartManager.getSubtotal(false)));
            scrollCart.setViewportView(panelCartInner);
            btnCheckout.setEnabled(true);
        } else {
            labelEstimatedSub.setText("Estimated Subtotal: $0.00");
            scrollCart.setViewportView(labelShop);
            btnCheckout.setEnabled(false);
        }

        panelCart.revalidate();
        panelCart.repaint();
        scrollCart.revalidate();
        scrollCart.repaint();

        toggleCart.setText(String.valueOf(cartAmt));

        loadCart.start();

    }

    public void showProductDetails(InventoryItem item) {
        panelBrowsing.removeAll();

        if (item != null) {
            panelProductPage = new PanelProductDetails(this, item);
            panelBrowsing.add(panelProductPage);

            panelOptions.setVisible(false);
            btnBack.setVisible(true);
        }

        revalidate();
        repaint();
    }

    public void showCheckout() {
        panelCenterScreen.removeAll();

        panelCheckout = new PanelCheckout(this, cartManager);
        panelCenterScreen.add(panelCheckout);

        panelOptions.setVisible(false);
        btnBack.setVisible(true);

        revalidate();
        repaint();
    }

    public void showNotification() {
        panelCenterScreen.removeAll();

        cartManager.removeAllItems();
        loadCart();

        panelCenterScreen.add(panelNotification);

        btnBack.setVisible(false);
        panelOptions.setVisible(false);

        revalidate();
        repaint();
    }

    public void showMain() {
        panelCenterScreen.removeAll();
        panelBrowsing.removeAll();

        panelBrowsing.add(panelBrowsingInner, BorderLayout.CENTER);
        panelCenterScreen.add(splitPane);

        panelOptions.setVisible(true);

        revalidate();
        repaint();
    }

    public void addToCart(InventoryItem item, int quantity) {
        showMain();

        cartManager.addItem(item, quantity);

        scrollCart.setViewportView(labelShop);
        loadCart();

        toggleCart.setSelected(true);
        toggleCartActionPerformed(null);
    }

    public void removeItem(InventoryItem item) {
        cartManager.removeItem(item);

        loadCart();
    }

    private ArrayList<Component> getFocusableComponents() {
        ArrayList<Component> components = new ArrayList<>();

        components.add(btnAccount);
        components.add(btnBack);
        components.add(btnCheckout);
        components.add(btnClearCart);
        components.add(btnNotOkay);
        components.add(btnSearch);
        components.add(toggleCart);
        components.add(toggleExpandCart);

        return components;
    }

    public void addFocusListeners() {
        FocusListener focusButton = new FocusListener() {
            Color originalButtonColor;
            Color originalFontColor;

            @Override
            public void focusGained(FocusEvent e) {
                originalButtonColor = e.getComponent().getBackground();
                originalFontColor = e.getComponent().getForeground();

                e.getComponent().setBackground(originalButtonColor.brighter());
                e.getComponent().setForeground(originalFontColor.brighter());
            }

            @Override
            public void focusLost(FocusEvent e) {
                e.getComponent().setBackground(originalButtonColor);
                e.getComponent().setForeground(originalFontColor);
            }
        };

        for (Component c : getFocusableComponents()) {
            c.addFocusListener(focusButton);
        }

    }

    public JScrollPane getProductScrollPane() {
        return scrollProducts;
    }

    public JScrollPane getCartScrollPane() {
        return scrollCart;
    }

    public int getDisplayLimit() {
        return displayLimit;
    }

    public void setEstimatedCartTotal(String text) {
        labelEstimatedSub.setText(text);
    }

    public boolean isCustomerActive() {
        return (user != null) ? true : false;
    }

    public Person getCustomer() {
        return user;
    }

    public StateManager getState() {
        return panelState;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn;
    private javax.swing.JButton btnAccount;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnClearCart;
    private javax.swing.JButton btnNotOkay;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> comboCategories;
    private javax.swing.JComboBox<String> comboCustomers;
    private javax.swing.JComboBox<String> comboOther;
    private javax.swing.JTextField fieldSearch;
    private javax.swing.JLabel labelChooseCustomer;
    private javax.swing.JLabel labelEstimatedSub;
    private javax.swing.JLabel labelLoading;
    private javax.swing.JLabel labelShop;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JPanel panelBrowsing;
    private javax.swing.JPanel panelBrowsingInner;
    private javax.swing.JPanel panelCart;
    private javax.swing.JPanel panelCartInner;
    private javax.swing.JPanel panelCenterScreen;
    private javax.swing.JPanel panelControls;
    private javax.swing.JPanel panelLimitBtns;
    private javax.swing.JPanel panelNotification;
    private javax.swing.JPanel panelOptions;
    private javax.swing.JPanel panelScrollProducts;
    private javax.swing.JScrollPane scrollCart;
    private javax.swing.JScrollPane scrollNotification;
    private javax.swing.JScrollPane scrollProducts;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTextArea textAreaNotification;
    private javax.swing.JToggleButton toggleCart;
    private javax.swing.JToggleButton toggleExpandCart;
    // End of variables declaration//GEN-END:variables
}
